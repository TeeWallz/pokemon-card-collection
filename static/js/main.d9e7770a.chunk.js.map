{"version":3,"sources":["actions/types.js","services/auth.service.js","components/login.component.js","actions/auth.js","components/register.component.js","services/auth-header.js","config/api_config.js","services/user.service.js","components/home.component.js","components/profile.component.js","components/board-user.component.js","components/board-moderator.component.js","components/board-admin.component.js","reducers/auth.js","reducers/message.js","reducers/tcgApi.js","reducers/index.js","store.js","helpers/tcgApiLocalData.js","actions/tcgApi.js","services/collection.service.js","components/collections-list.component.js","components/collections-create.component.js","components/collections-view.component.js","helpers/history.js","common/auth-verify.js","components/NotFound.js","components/collection-view-epic-component.js","components/collections-view-epic.function.js","components/collection-view.function.js","App.js","actions/message.js","reportWebVitals.js","index.js"],"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","CLEAR_MESSAGE","SET_TCG_CARDS","APPEND_TCG_CARDS","API_URL","username","password","axios","post","then","response","data","accessToken","localStorage","setItem","JSON","stringify","removeItem","email","required","value","className","role","Login","props","handleLogin","bind","onChangeUsername","onChangePassword","state","loading","e","this","setState","target","preventDefault","form","validateAll","dispatch","history","checkBtn","context","_errors","length","AuthService","login","type","payload","user","Promise","resolve","error","message","toString","reject","window","location","reload","catch","isLoggedIn","to","Fragment","src","alt","onSubmit","ref","c","htmlFor","name","onChange","validations","disabled","style","display","Component","connect","auth","isEmail","vusername","vpassword","Register","handleRegister","onChangeEmail","successful","register","authHeader","parse","getItem","get","headers","Home","content","UserService","getPublicContent","Profile","currentUser","substring","substr","id","roles","map","index","BoardUser","getUserBoard","getModeratorBoard","getAdminBoard","initialState","cards","generateCardsDict","cards_dict","reduce","a","x","array","dict","combineReducers","action","tcgApi","console","log","new_card_array","state_card_ids","Object","keys","forEach","new_card","push","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","pokemon","configure","apiKey","getCardsNotInLocal","ids_array","getState","ids_in_store","sort","ids_needed","filter","in_store","includes","i","j","promises","ids_query","slice","b","CollectionService","postTcgApiQuery","all","api_pull_chunk","concat","appendCards","result","enrichCollectionCardsWithTcgData","collectionCards","currentCardKeys","part","theArray","cardId","rarity","set","releaseDate","number","printedTotal","query","params","epic_cards","collection","yeet","put","alert","err","delete","BoardCollections","collections","loadCollectionsIntoTable","optionFormatter","onDeleteClick","onRowClick","getAll","row","rowIndex","confirm","currentTarget","deleteCollection","link","open","cursor","onClick","onOpenClick","rowEvents","columns","dataField","text","sortFunc","order","rowA","rowB","formatter","cell","formatExtraData","statusString","keyField","striped","hover","CollectionsCreate","searchTcgApiCard","changeSearchTerm","changeCollectionName","saveCollection","Speeeeeeen","saveAndRedirectClick","saveAndCreateAnotherClick","searchCards","searchTerm","collectionName","isLoading","alignContent","justifyContent","Spinner","animation","getTcgApiQuery","ex","currentSearchCards","collectionToSubmit","obj","count","postCollection","Container","Row","Col","xs","lg","fontSize","textAlign","marginTop","Form","Label","Control","placeholder","Button","variant","isKey","dataAlign","dataSort","CollectionView","handleCardCollectedCheckboxClick","handleSaveCollectionButtonClick","cardCollectedToggle","collectionId","getOneDetail","enumObject","ToggleButton","checked","size","currentState","card","currentCollection","l","Set","prop","has","putCollection","collectedCount","previousValue","currentValue","Math","min","completion","round","createBrowserHistory","AuthVerify","listen","token","atob","split","parseJwt","exp","Date","now","logOut","NotFound","SearchBar","Search","CollectionViewEpic","handleCardPurchasedCheckboxClick","loadFilters","displaySingleCollection","changedCards","checkChanged","propertyValues","setNames","collectionNames","filters","setNameFilter","epicFilter","undefined","getEpic","cardIds","item","new_collectionCards","forceUpdate","setName","setNamesDict","assign","collectionNamesDict","stateRow","find","collection_card_key","add","purchased","cardsToSend","patchCollectionCards","filterVal","searchable","selectFilter","options","headerStyle","colum","colIndex","width","hidden","whiteSpace","textOverflow","overflow","label","changed","classnames","exportCSV","fileName","separator","ignoreHeader","noAutoBOM","condensed","search","searchProps","baseProps","srText","filterFactory","pagination","paginationFactory","sizePerPageList","CollectionViewWrapper","collectionid","useParams","App","showModeratorBoard","showAdminBoard","logout","marginLeft","href","exact","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oYAAaA,EAAmB,mBACnBC,EAAgB,gBAChBC,EAAgB,gBAChBC,EAAa,aACbC,EAAS,SAETC,EAAc,cACdC,EAAgB,gBAEhBC,EAAgB,gBAChBC,EAAmB,mB,iBCR1BC,EAAU,kCA4BD,M,qFAzBX,SAAMC,EAAUC,GACZ,OAAOC,IACFC,KAAKJ,EAAU,SAAU,CAAEC,WAAUC,aACrCG,MAAK,SAACC,GAKH,OAJIA,EAASC,KAAKC,aACdC,aAAaC,QAAQ,OAAQC,KAAKC,UAAUN,EAASC,OAGlDD,EAASC,U,oBAI5B,WACIE,aAAaI,WAAW,U,sBAG5B,SAASZ,EAAUa,EAAOZ,GACtB,OAAOC,IAAMC,KAAKJ,EAAU,SAAU,CAClCC,WACAa,QACAZ,iB,aCfNa,EAAW,SAACC,GACd,IAAKA,EACD,OACI,qBAAKC,UAAU,qBAAqBC,KAAK,QAAzC,sCAONC,E,kDACF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBAExB,EAAKG,MAAQ,CACTxB,SAAU,GACVC,SAAU,GACVwB,SAAS,GATE,E,oDAanB,SAAiBC,GACbC,KAAKC,SAAS,CACV5B,SAAU0B,EAAEG,OAAOd,U,8BAI3B,SAAiBW,GACbC,KAAKC,SAAS,CACV3B,SAAUyB,EAAEG,OAAOd,U,yBAI3B,SAAYW,GAAI,IAAD,OACXA,EAAEI,iBAEFH,KAAKC,SAAS,CACVH,SAAS,IAGbE,KAAKI,KAAKC,cAPC,ICCGhC,EAAUC,EDDb,EASmB0B,KAAKR,MAA3Bc,EATG,EASHA,SATG,EASOC,QAE2B,IAAzCP,KAAKQ,SAASC,QAAQC,QAAQC,OAC9BL,GCXUjC,EDWK2B,KAAKH,MAAMxB,SCXNC,EDWgB0B,KAAKH,MAAMvB,SCXd,SAACgC,GAC1C,OAAOM,EAAYC,MAAMxC,EAAUC,GAAUG,MACzC,SAACE,GAMG,OALA2B,EAAS,CACLQ,KAAMjD,EACNkD,QAAS,CAAEC,KAAMrC,KAGdsC,QAAQC,aAEnB,SAACC,GACG,IAAMC,EACDD,EAAMzC,UACHyC,EAAMzC,SAASC,MACfwC,EAAMzC,SAASC,KAAKyC,SACxBD,EAAMC,SACND,EAAME,WAWV,OATAf,EAAS,CACLQ,KAAMhD,IAGVwC,EAAS,CACLQ,KAAM9C,EACN+C,QAASK,IAGNH,QAAQK,eDfV7C,MAAK,WAEF8C,OAAOC,SAASC,YAEnBC,OAAM,WACH,EAAKzB,SAAS,CACVH,SAAS,OAIrBE,KAAKC,SAAS,CACVH,SAAS,M,oBAKrB,WAAU,IAAD,SAC2BE,KAAKR,MAA7BmC,EADH,EACGA,WAAYP,EADf,EACeA,QAEpB,OAAIO,EACO,cAAC,IAAD,CAAUC,GAAG,aAIpB,cAAC,IAAMC,SAAP,UACI,qBAAKxC,UAAU,YAAf,SACI,sBAAKA,UAAU,sBAAf,UACI,qBACIyC,IAAI,8CACJC,IAAI,cACJ1C,UAAU,qBAGd,eAAC,IAAD,CACI2C,SAAUhC,KAAKP,YACfwC,IAAK,SAACC,GACF,EAAK9B,KAAO8B,GAHpB,UAMI,sBAAK7C,UAAU,aAAf,UACI,uBAAO8C,QAAQ,WAAf,sBACA,cAAC,IAAD,CACIrB,KAAK,OACLzB,UAAU,eACV+C,KAAK,WACLhD,MAAOY,KAAKH,MAAMxB,SAClBgE,SAAUrC,KAAKL,iBACf2C,YAAa,CAACnD,QAItB,sBAAKE,UAAU,aAAf,UACI,uBAAO8C,QAAQ,WAAf,sBACA,cAAC,IAAD,CACIrB,KAAK,WACLzB,UAAU,eACV+C,KAAK,WACLhD,MAAOY,KAAKH,MAAMvB,SAClB+D,SAAUrC,KAAKJ,iBACf0C,YAAa,CAACnD,QAItB,qBAAKE,UAAU,aAAf,SACI,yBACIA,UAAU,4BACVkD,SAAUvC,KAAKH,MAAMC,QAFzB,UAIKE,KAAKH,MAAMC,SACR,sBAAMT,UAAU,qCAEpB,8CAIP+B,GACG,qBAAK/B,UAAU,aAAf,SACI,qBAAKA,UAAU,qBAAqBC,KAAK,QAAzC,SACK8B,MAIb,cAAC,IAAD,CACIoB,MAAO,CAAEC,QAAS,QAClBR,IAAK,SAACC,GACF,EAAK1B,SAAW0B,mB,GA5HhCQ,aAgJLC,mBATf,SAAyB9C,GAGrB,MAAO,CACH8B,WAHmB9B,EAAM+C,KAArBjB,WAIJP,QAHgBvB,EAAMuB,QAAlBA,WAOGuB,CAAyBpD,G,SE3JlCJ,EAAW,SAACC,GACd,IAAKA,EACD,OACI,qBAAKC,UAAU,qBAAqBC,KAAK,QAAzC,sCAONJ,EAAQ,SAACE,GACX,IAAKyD,kBAAQzD,GACT,OACI,qBAAKC,UAAU,qBAAqBC,KAAK,QAAzC,yCAONwD,EAAY,SAAC1D,GACf,GAAIA,EAAMuB,OAAS,GAAKvB,EAAMuB,OAAS,GACnC,OACI,qBAAKtB,UAAU,qBAAqBC,KAAK,QAAzC,gEAONyD,EAAY,SAAC3D,GACf,GAAIA,EAAMuB,OAAS,GAAKvB,EAAMuB,OAAS,GACnC,OACI,qBAAKtB,UAAU,qBAAqBC,KAAK,QAAzC,gEAON0D,E,kDACF,WAAYxD,GAAQ,IAAD,8BACf,cAAMA,IACDyD,eAAiB,EAAKA,eAAevD,KAApB,gBACtB,EAAKC,iBAAmB,EAAKA,iBAAiBD,KAAtB,gBACxB,EAAKwD,cAAgB,EAAKA,cAAcxD,KAAnB,gBACrB,EAAKE,iBAAmB,EAAKA,iBAAiBF,KAAtB,gBAExB,EAAKG,MAAQ,CACTxB,SAAU,GACVa,MAAO,GACPZ,SAAU,GACV6E,YAAY,GAXD,E,oDAenB,SAAiBpD,GACbC,KAAKC,SAAS,CACV5B,SAAU0B,EAAEG,OAAOd,U,2BAI3B,SAAcW,GACVC,KAAKC,SAAS,CACVf,MAAOa,EAAEG,OAAOd,U,8BAIxB,SAAiBW,GACbC,KAAKC,SAAS,CACV3B,SAAUyB,EAAEG,OAAOd,U,4BAI3B,SAAeW,GAAI,IDxEE1B,EAAUa,EAAOZ,ECwEpB,OACdyB,EAAEI,iBAEFH,KAAKC,SAAS,CACVkD,YAAY,IAGhBnD,KAAKI,KAAKC,cAEmC,IAAzCL,KAAKQ,SAASC,QAAQC,QAAQC,QAC9BX,KAAKR,MACAc,UDnFQjC,ECoFI2B,KAAKH,MAAMxB,SDpFLa,ECoFec,KAAKH,MAAMX,MDpFnBZ,ECoF0B0B,KAAKH,MAAMvB,SDpFxB,SAACgC,GACpD,OAAOM,EAAYwC,SAAS/E,EAAUa,EAAOZ,GAAUG,MACnD,SAACC,GAUG,OATA4B,EAAS,CACLQ,KAAMnD,IAGV2C,EAAS,CACLQ,KAAM9C,EACN+C,QAASrC,EAASC,KAAKyC,UAGpBH,QAAQC,aAEnB,SAACC,GACG,IAAMC,EACDD,EAAMzC,UACHyC,EAAMzC,SAASC,MACfwC,EAAMzC,SAASC,KAAKyC,SACxBD,EAAMC,SACND,EAAME,WAWV,OATAf,EAAS,CACLQ,KAAMlD,IAGV0C,EAAS,CACLQ,KAAM9C,EACN+C,QAASK,IAGNH,QAAQK,eCuDV7C,MAAK,WACF,EAAKwB,SAAS,CACVkD,YAAY,OAGnBzB,OAAM,WACH,EAAKzB,SAAS,CACVkD,YAAY,S,oBAMhC,WAAU,IAAD,OACG/B,EAAYpB,KAAKR,MAAjB4B,QAER,OACI,qBAAK/B,UAAU,YAAf,SACI,sBAAKA,UAAU,sBAAf,UACI,qBACIyC,IAAI,8CACJC,IAAI,cACJ1C,UAAU,qBAGd,eAAC,IAAD,CACI2C,SAAUhC,KAAKiD,eACfhB,IAAK,SAACC,GACF,EAAK9B,KAAO8B,GAHpB,WAMMlC,KAAKH,MAAMsD,YACT,gCACI,sBAAK9D,UAAU,aAAf,UACI,uBAAO8C,QAAQ,WAAf,sBACA,cAAC,IAAD,CACIrB,KAAK,OACLzB,UAAU,eACV+C,KAAK,WACLhD,MAAOY,KAAKH,MAAMxB,SAClBgE,SAAUrC,KAAKL,iBACf2C,YAAa,CAACnD,EAAU2D,QAIhC,sBAAKzD,UAAU,aAAf,UACI,uBAAO8C,QAAQ,QAAf,mBACA,cAAC,IAAD,CACIrB,KAAK,OACLzB,UAAU,eACV+C,KAAK,QACLhD,MAAOY,KAAKH,MAAMX,MAClBmD,SAAUrC,KAAKkD,cACfZ,YAAa,CAACnD,EAAUD,QAIhC,sBAAKG,UAAU,aAAf,UACI,uBAAO8C,QAAQ,WAAf,sBACA,cAAC,IAAD,CACIrB,KAAK,WACLzB,UAAU,eACV+C,KAAK,WACLhD,MAAOY,KAAKH,MAAMvB,SAClB+D,SAAUrC,KAAKJ,iBACf0C,YAAa,CAACnD,EAAU4D,QAIhC,qBAAK1D,UAAU,aAAf,SACI,wBAAQA,UAAU,4BAAlB,0BAKX+B,GACG,qBAAK/B,UAAU,aAAf,SACI,qBAAKA,UAAYW,KAAKH,MAAMsD,WAAa,sBAAwB,qBAAuB7D,KAAK,QAA7F,SACK8B,MAIb,cAAC,IAAD,CACIoB,MAAO,CAAEC,QAAS,QAClBR,IAAK,SAACC,GACF,EAAK1B,SAAW0B,iB,GArIzBQ,aAsJRC,mBAPf,SAAyB9C,GAErB,MAAO,CACHuB,QAFgBvB,EAAMuB,QAAlBA,WAMGuB,CAAyBK,GCvMzB,SAASK,IACpB,IAAMrC,EAAOjC,KAAKuE,MAAMzE,aAAa0E,QAAQ,SAE7C,OAAIvC,GAAQA,EAAKpC,YAEN,CAAE,iBAAkBoC,EAAKpC,aAEzB,GCNf,IAAMR,EAAU,6BCuBD,M,gGAjBX,WACI,OAAOG,IAAMiF,IAAIpF,EAAU,S,0BAG/B,WACI,OAAOG,IAAMiF,IAAIpF,EAAU,OAAQ,CAAEqF,QAASJ,Q,+BAGlD,WACI,OAAO9E,IAAMiF,IAAIpF,EAAU,MAAO,CAAEqF,QAASJ,Q,2BAGjD,WACI,OAAO9E,IAAMiF,IAAIpF,EAAU,QAAS,CAAEqF,QAASJ,U,MChBlCK,E,kDACjB,WAAYlE,GAAQ,IAAD,8BACf,cAAMA,IAEDK,MAAQ,CACT8D,QAAS,IAJE,E,qDAQnB,WAAqB,IAAD,OAChBC,EAAYC,mBAAmBpF,MAC3B,SAAAC,GACI,EAAKuB,SAAS,CACV0D,QAASjF,EAASC,UAG1B,SAAAwC,GACI,EAAKlB,SAAS,CACV0D,QACKxC,EAAMzC,UAAYyC,EAAMzC,SAASC,MAClCwC,EAAMC,SACND,EAAME,kB,oBAM1B,WACI,OACI,qBAAKhC,UAAU,YAAf,SACI,wBAAQA,UAAU,YAAlB,SACI,6BAAKW,KAAKH,MAAM8D,kB,GA/BFjB,aCA5BoB,E,4JAEF,WAAU,IACQC,EAAgB/D,KAAKR,MAA3BwB,KAER,OAAK+C,EAKD,sBAAK1E,UAAU,YAAf,UACI,wBAAQA,UAAU,YAAlB,SACI,+BACI,iCAAS0E,EAAY1F,WADzB,gBAIJ,8BACI,4CADJ,IAC6B0F,EAAYnF,YAAYoF,UAAU,EAAG,IADlE,OAC2E,IACtED,EAAYnF,YAAYqF,OAAOF,EAAYnF,YAAY+B,OAAS,OAErE,8BACI,yCADJ,IAC0BoD,EAAYG,MAEtC,8BACI,4CADJ,IAC6BH,EAAY7E,SAEzC,kDACA,6BACK6E,EAAYI,OACbJ,EAAYI,MAAMC,KAAI,SAAC9E,EAAM+E,GAAP,OAAiB,6BAAiB/E,GAAR+E,WAvBjD,cAAC,IAAD,CAAUzC,GAAG,e,GANVc,aA2CPC,mBAPf,SAAyB9C,GAErB,MAAO,CACHmB,KAFanB,EAAM+C,KAAf5B,QAMG2B,CAAyBmB,GC3CnBQ,E,kDACjB,WAAY9E,GAAQ,IAAD,8BACf,cAAMA,IAEDK,MAAQ,CACT8D,QAAS,IAJE,E,qDAQnB,WAAqB,IAAD,OAChBC,EAAYW,eAAe9F,MACvB,SAAAC,GACI,EAAKuB,SAAS,CACV0D,QAASjF,EAASC,UAG1B,SAAAwC,GACI,EAAKlB,SAAS,CACV0D,QACKxC,EAAMzC,UACHyC,EAAMzC,SAASC,MACfwC,EAAMzC,SAASC,KAAKyC,SACxBD,EAAMC,SACND,EAAME,kB,oBAM1B,WACI,OACI,qBAAKhC,UAAU,YAAf,SACI,wBAAQA,UAAU,YAAlB,SACI,6BAAKW,KAAKH,MAAM8D,kB,GAjCGjB,aCAlB4B,E,kDACjB,WAAY9E,GAAQ,IAAD,8BACf,cAAMA,IAEDK,MAAQ,CACT8D,QAAS,IAJE,E,qDAQnB,WAAqB,IAAD,OAChBC,EAAYY,oBAAoB/F,MAC5B,SAAAC,GACI,EAAKuB,SAAS,CACV0D,QAASjF,EAASC,UAG1B,SAAAwC,GACI,EAAKlB,SAAS,CACV0D,QACKxC,EAAMzC,UACHyC,EAAMzC,SAASC,MACfwC,EAAMzC,SAASC,KAAKyC,SACxBD,EAAMC,SACND,EAAME,kB,oBAM1B,WACI,OACI,qBAAKhC,UAAU,YAAf,SACI,wBAAQA,UAAU,YAAlB,SACI,6BAAKW,KAAKH,MAAM8D,kB,GAjCGjB,aCAlB4B,E,kDACjB,WAAY9E,GAAQ,IAAD,8BACf,cAAMA,IAEDK,MAAQ,CACT8D,QAAS,IAJE,E,qDAQnB,WAAqB,IAAD,OAChBC,EAAYa,gBAAgBhG,MACxB,SAAAC,GACI,EAAKuB,SAAS,CACV0D,QAASjF,EAASC,UAG1B,SAAAwC,GACI,EAAKlB,SAAS,CACV0D,QACKxC,EAAMzC,UACHyC,EAAMzC,SAASC,MACfwC,EAAMzC,SAASC,KAAKyC,SACxBD,EAAMC,SACND,EAAME,kB,oBAM1B,WACI,OACI,qBAAKhC,UAAU,YAAf,SACI,wBAAQA,UAAU,YAAlB,SACI,6BAAKW,KAAKH,MAAM8D,kB,GAjCGjB,a,qCCIjC1B,GAAOjC,KAAKuE,MAAMzE,aAAa0E,QAAQ,SAEvCmB,GAAe1D,GACf,CAAEW,YAAY,EAAMX,SACpB,CAAEW,YAAY,EAAOX,KAAM,MCV3B0D,GAAe,G,kBCKfC,GAAQ5F,KAAKuE,MAAMzE,aAAa0E,QAAQ,WAAa,GACrDqB,GAAoB,SAAUD,GAChC,IAAIE,EAAaF,EAAMG,QAAO,SAACC,EAAEC,GAAH,oBAAC,gBAAaD,GAAd,mBAAkBC,EAAEd,GAAKc,MAAK,IAC5D,MAAO,CACHL,MAAO,CACHM,MAAON,EACPO,KAAML,KAKZH,GAAeE,GAAkBD,ICbxBQ,8BAAgB,CAC3BvC,KHQW,WAAyC,IAA/B/C,EAA8B,uDAAtB6E,GAAcU,EAAQ,uCAC3CtE,EAAkBsE,EAAlBtE,KAAMC,EAAYqE,EAAZrE,QAEd,OAAQD,GACJ,KAAKnD,EAKL,KAAKC,EACD,OAAO,6BACAiC,GADP,IAEI8B,YAAY,IAEpB,KAAK9D,EACD,OAAO,6BACAgC,GADP,IAEI8B,YAAY,EACZX,KAAMD,EAAQC,OAEtB,KAAKlD,EAML,KAAKC,EACD,OAAO,6BACA8B,GADP,IAEI8B,YAAY,EACZX,KAAM,OAEd,QACI,OAAOnB,IGxCfuB,QFHW,WAAyC,IAA/BvB,EAA8B,uDAAtB6E,GAAcU,EAAQ,uCAC3CtE,EAAkBsE,EAAlBtE,KAAMC,EAAYqE,EAAZrE,QAEd,OAAQD,GACJ,KAAK9C,EACD,MAAO,CAAEoD,QAASL,GAEtB,KAAK9C,EACD,MAAO,CAAEmD,QAAS,IAEtB,QACI,OAAOvB,IEPfwF,ODYW,WAAyC,IAA/BxF,EAA8B,uDAAtB6E,GAAcU,EAAQ,uCAG3CtE,EAAkBsE,EAAlBtE,KAAMC,EAAYqE,EAAZrE,QAEd,OAAQD,GACJ,KAAK5C,EAED,OADAoH,QAAQC,IAAI,oBAAqBxE,GAC1B,6BACAlB,GADP,IAEI8E,MAAOC,GAAkB7D,KAGjC,KAAK5C,EACD,IAAIqH,EAAc,aAAO3F,EAAM8E,MAAMM,OACjCQ,EAAiBC,OAAOC,KAAK9F,EAAM8E,MAAMO,MAU7C,OARAnE,EAAQ6E,SAAQ,SAAUC,GACjBA,EAAS3B,MAAMuB,GAChBD,EAAeM,KAAKD,MAI5BhH,aAAaC,QAAQ,QAASC,KAAKC,UAAUwG,IAEtC,6BACA3F,GACA+E,GAAmBY,IAG9B,QACI,OAAO3F,ME9CbkG,GAAa,CAACC,MAOLC,GALDC,uBACVC,GACAC,+BAAoBC,mBAAe,WAAf,EAAmBN,M,SCJ3CO,KAAQC,UAAU,CAACC,OAAQ,yCAKpB,IAAMC,GAAqB,SAACC,GAC/B,OAAO,IAAIzF,SAAQ,SAACC,EAASI,GAAW,IAE7B+D,EAAUY,GAAMU,WAAhBtB,OAEDuB,EAAelB,OAAOC,KAAKN,EAAOV,MAAMO,MAC9C0B,EAAaC,OACbH,EAAUG,OAGVvB,QAAQC,IAAIqB,GACZtB,QAAQC,IAAImB,GACZ,IAAMI,EAAaJ,EAAUK,QAAO,SAAS7C,GACzC,IAAI8C,EAAWJ,EAAaK,SAAS/C,GAIrC,OAAQ8C,KAMZ,GADA1B,QAAQC,IAAR,UAAeuB,EAAWnG,OAA1B,mCACyB,IAAtBmG,EAAWnG,OAAd,CAOA,IAAIuG,EAAEC,EAA2BC,EAAW,GAC5C,IAAKF,EAAI,EAAEC,EAAIT,EAAU/F,OAAQuG,EAAIC,EAAGD,GADZ,IACwB,CAGhD,IAAIG,EAFQP,EAAWQ,MAAMJ,EAAGA,EAFR,KAIEpC,QAAO,SAACC,EAAGwC,GAAJ,mBAAiBA,EAAjB,eAAyBxC,KAAM,IAChEsC,EAAYA,EAAUC,MAAM,GAAI,GAChChC,QAAQC,IAAI8B,GAEK,KAAdA,GACCD,EAAStB,KAAM0B,GAAkBC,gBAAgBJ,IAMzDpG,QAAQyG,IAAIN,GAAU3I,MAAK,SAACkJ,GACxB,IAAIhD,EAAQ,GACZ,IAAKuC,EAAI,EAAGA,EAAIS,EAAehH,OAAQuG,GAAK,EACxCvC,EAAQA,EAAMiD,OAAOD,EAAeT,GAAGvI,MAE3C2G,QAAQC,IAAI,WAAaZ,EAAMhE,OAAS,sBAExCsF,GAAM3F,SChDS,SAACqE,GAAD,OAAW,SAAArE,GAK9B,OAJAA,EAAS,CACDQ,KAAM,mBACNC,QAAS4D,IAEV1D,QAAQC,WD2CI2G,CAAYlD,IAAQlG,MAAK,SAACqJ,GACrC5G,EAAQ4G,cAcXC,GAAmC,SAACC,GAAqB,IAC3D3C,EAAUY,GAAMU,WAAhBtB,OACD4C,EAAkBvC,OAAOC,KAAKN,EAAOV,MAAMO,MAkBjD,OAjBA+C,EAAgBpB,OAEhBmB,EAAgBpC,SAAQ,SAASsC,EAAM7D,EAAO8D,GACvCF,EAAgBhB,SAASkB,EAAS9D,GAAO+D,SACxCD,EAAS9D,GAAT,OAA4BgB,EAAOV,MAAMO,KAAKiD,EAAS9D,GAAO+D,QAAQC,OACtEF,EAAS9D,GAAT,KAA0BgB,EAAOV,MAAMO,KAAKiD,EAAS9D,GAAO+D,QAAQhG,KACpE+F,EAAS9D,GAAT,QAA6BgB,EAAOV,MAAMO,KAAKiD,EAAS9D,GAAO+D,QAAQE,IAAIlG,KAC3E+F,EAAS9D,GAAT,eAAoCgB,EAAOV,MAAMO,KAAKiD,EAAS9D,GAAO+D,QAAQE,IAAIC,YAClFJ,EAAS9D,GAAT,WAAgCgB,EAAOV,MAAMO,KAAKiD,EAAS9D,GAAO+D,QAAQI,OAAS,IAAMnD,EAAOV,MAAMO,KAAKiD,EAAS9D,GAAO+D,QAAQE,IAAIG,eAGvIN,EAAS9D,GAAT,OAA4B,aAC5B8D,EAAS9D,GAAT,KAA0B,aAC1B8D,EAAS9D,GAAT,QAA6B,iBAI9B2D,GEAI,O,sFAvFX,WACI,OAAOzJ,IAAMiF,IAAIpF,K,qBAGrB,SAAQsK,GAEJ,OAAO,IAAIzH,SAAQ,SAASC,EAASI,GACjC/C,IAAMiF,IAAIpF,EAAU,OAAQ,CAAEuK,OAAQD,IACjCjK,MAAM,SAAAmK,GACH1H,EAAQ6G,GAAiCa,EAAWjK,UAEvD+C,OAAM,SAACP,GACJG,EAAOH,W,0BAMvB,SAAa+C,GACT,OAAO3F,IAAMiF,IAAIpF,EAAU,cAAgB8F,K,4BAc/C,SAAe2E,GACX,IAAIpF,EAAUJ,IAGd,OAFAI,EAAQqF,KAAO,MAERvK,IACFC,KAAKJ,EAAU,aAAcyK,EAAY,CAACpF,QAASA,M,2BAI5D,SAAcS,EAAI2E,GACd,OAAOtK,IACFwK,IAAI3K,EAAU,cAAgB8F,EAAK2E,GACnCpK,MAAK,SAACC,GACHsK,MAAM,YAETtH,OAAM,SAACuH,GACJ3D,QAAQC,IAAI0D,Q,4BAKxB,SAAeP,GACX,OAAOnK,IAAMiF,IAAIpF,EAAU,cACvB,CAAEuK,OAAQ,CAACD,MAAMA,O,6BAIzB,SAAgBA,GACZ,OAAOnK,IAAMC,KAAKJ,EAAU,cACxB,CAAEO,KAAM,CAAC+J,MAAMA,O,8BAIvB,SAAiBxE,GACb,IAAIT,EAAUJ,IAKd,OAJAI,EAAQqF,KAAO,MAIRvK,IAAM2K,OAAO9K,gBAA+B8F,EAAI,CAACT,QAASA,M,kCAIrE,SAAqBkB,GACjB,IAAIlB,EAAUJ,IAId,OAAO9E,IAAMwK,IAAI3K,EAAU,kBAAmB,CAAC4J,gBAAiBrD,GAAQ,CAAClB,QAASA,Q,uGCxEpF0F,I,gEACF,WAAY3J,GAAQ,IAAD,8BACf,cAAMA,IAEDK,MAAQ,CACTuJ,YAAa,IAIjB,EAAKC,yBAA2B,EAAKA,yBAAyB3J,KAA9B,gBAChC,EAAK4J,gBAAkB,EAAKA,gBAAgB5J,KAArB,gBACvB,EAAK6J,cAAgB,EAAKA,cAAc7J,KAAnB,gBACrB,EAAK8J,WAAa,EAAKA,WAAW9J,KAAhB,gBAXH,E,qDAcnB,WACIM,KAAKqJ,6B,sCAGT,WAA2B,IAAD,OACtB7B,GAAkBiC,SAAShL,MACvB,SAAAC,GACI,EAAKuB,SAAS,CACVmJ,YAAa1K,EAASC,UAG9B,SAAAwC,GACI,EAAKlB,SAAS,CACV0D,QACKxC,EAAMzC,UACHyC,EAAMzC,SAASC,MACfwC,EAAMzC,SAASC,KAAKyC,SACxBD,EAAMC,SACND,EAAME,kB,wBAM1B,SAAWtB,EAAG2J,EAAKC,GACfrE,QAAQC,IAAaoE,K,2BAGzB,SAAc5J,GAAG,IAAD,OACZ,GAAIwB,OAAOqI,QAAQ,oCAAsC7J,EAAE8J,cAAc3F,IAErE,OAAOsD,GAAkBsC,iBAAiB/J,EAAE8J,cAAc3F,IACrDzF,MAAK,WACF,EAAK4K,8BAER3H,OAAM,SAAC3B,GACJiJ,MAAM,UACN1D,QAAQC,IAAIxF,MAQpBuF,QAAQC,IAAI,0C,yBAKpB,SAAYxF,GACR,IAAMgK,EAAO,eAAkBhK,EAAE8J,cAAc3F,GAC/C3C,OAAOyI,KAAKD,EAAM,Y,6BAGtB,SAAgBhK,GAAG,IAAD,OAed,OAbI,iCACI,sBAAMmE,GAAInE,EAAGyC,MAAO,CAACyH,OAAQ,WAAYC,QAAS,SAACnK,GAC/C,EAAKoK,YAAYpK,IADrB,SAEG,mBAAGV,UAAU,+BAHpB,YAOI,sBAAM6E,GAAInE,EAAGyC,MAAO,CAACyH,OAAQ,WAAYC,QAAS,SAACnK,GAC/C,EAAKwJ,cAAcxJ,IADvB,SAEG,mBAAGV,UAAU,uB,oBAO5B,WACOW,KAAKH,MAAMuJ,YAAYzI,OAAS,GAC/B2E,QAAQC,IAAIvF,KAAKH,MAAMuJ,YAAY,IAGvC,IAAMgB,EAAY,CACdF,QAAS,SAACnK,EAAG2J,EAAKC,GACd,IAAMI,EAAO,eAAkBL,EAAIxF,GACnC3C,OAAOyI,KAAKD,EAAM,YA2C1B,OACI,qBAAK1K,UAAU,YAAf,SACI,yBAAQA,UAAU,YAAlB,UAEI,iDACA,cAAC,IAAD,CAAMuC,GAAG,qBAAqBvC,UAAU,kBAAxC,+BACA,8BAGI,cAAC,KAAD,CACIV,KAAMqB,KAAKH,MAAMuJ,YACjBiB,QAjDJ,CACZ,CACIC,UAAW,OACXC,KAAM,OACN1D,MAAM,GAEV,CACIyD,UAAW,uBACXC,KAAM,YACN1D,MAAM,GAEV,CACIyD,UAAW,aACXC,KAAM,aACN1D,MAAM,GAEV,CACIyD,UAAW,SACXC,KAAM,SACN1D,MAAM,EACN2D,SAAU,SAACzF,EAAGwC,EAAGkD,EAAOH,EAAWI,EAAMC,GACrC,MAAc,QAAVF,EACOlD,EAAIxC,EAERA,EAAIwC,GAEfqD,UAAW,SAACC,EAAMnB,EAAKC,EAAUmB,GAC7B,OAAOpB,EAAIqB,gBAuBHC,SAAU,KACVC,SAAS,EACTC,OAAO,EACPd,UAAYA,e,GA1JT1H,cA6LhBC,oBARf,SAAyB9C,GAErB,MAAO,KAMI8C,CAAyBwG,I,8ECtLlCgC,G,kDACF,WAAY3L,GAAQ,IAAD,8BACf,cAAMA,IAED4L,iBAAmB,EAAKA,iBAAiB1L,KAAtB,gBACxB,EAAK2L,iBAAmB,EAAKA,iBAAiB3L,KAAtB,gBACxB,EAAK4L,qBAAuB,EAAKA,qBAAqB5L,KAA1B,gBAC5B,EAAK6L,eAAiB,EAAKA,eAAe7L,KAApB,gBACtB,EAAK8L,WAAa,EAAKA,WAAW9L,KAAhB,gBAClB,EAAK+L,qBAAuB,EAAKA,qBAAqB/L,KAA1B,gBAC5B,EAAKgM,0BAA4B,EAAKA,0BAA0BhM,KAA/B,gBAGjC,EAAKG,MAAQ,CACT8L,YAAa,GACbC,WAAY,iBACZC,eAAgB,GAChBC,WAAW,GAhBA,E,qDAoBnB,c,8BAIA,SAAiB/L,GAAI,IAAD,OAChBC,KAAKC,SAAS,CAAE2L,WAAY7L,EAAEG,OAAOd,QAAS,WAC1CkG,QAAQC,IAAI,EAAK1F,Y,kCAGzB,SAAqBE,GAAI,IAAD,OACpBC,KAAKC,SAAS,CAAE4L,eAAgB9L,EAAEG,OAAOd,QAAS,WAC9CkG,QAAQC,IAAI,EAAK1F,Y,wBAIzB,WACI,OAAGG,KAAKH,MAAMiM,UAEN,qBAAKtJ,MAAO,CAACC,QAAS,OAAQsJ,aAAc,SAAUC,eAAgB,UAAtE,SACI,qBAAKxJ,MAAO,CAACC,QAAQ,gBAArB,SACI,cAACwJ,GAAA,EAAD,CAASC,UAAU,SAAS5M,KAAK,eAQtC,K,8BAKf,SAAiBoJ,GAAO,IAAD,OACnB1I,KAAKC,SAAS,CAAC6L,WAAW,IAC1BtE,GAAkB2E,eAAenM,KAAKH,MAAM+L,YACvCnN,MAAK,SAACkG,GACkBA,EAAMhG,KAI3B,EAAKsB,SAAS,CAAC0L,YAAahH,EAAMhG,KAAMmN,WAAW,IAAQ,WACvDxG,QAAQC,IAAI,EAAK1F,aAGxB6B,OAAM,SAAC0K,GACJpD,MAAM,UACN,EAAK/I,SAAS,CAAE6L,WAAW,IAAQ,WAC/BxG,QAAQC,IAAI,EAAK1F,e,kCAKjC,WACIG,KAAKuL,iBACA9M,MAAK,SAACC,GACH6C,OAAOC,SAAW,eAAiB9C,EAASC,KAAKuF,MAEpDxC,OAAM,SAACuH,GACJD,MAAMC,Q,uCAIlB,WACIjJ,KAAKuL,iBACA9M,MAAK,SAACC,GACH6C,OAAOC,SAAW,wBAErBE,OAAM,SAACuH,GACJD,MAAMC,Q,4BAIlB,WACI,GAAiC,KAA9BjJ,KAAKH,MAAMgM,eAAd,CAIA,GAAqC,IAAlC7L,KAAKH,MAAM8L,YAAYhL,OAA1B,CALY,MAUJgL,EAVI,gBAUiB3L,KAAKH,OAA1B8L,YACFU,EAAqBtN,KAAKuE,MAAMvE,KAAKC,UAAU2M,IAEjDW,EAAqB,CACrBlK,KAAMpC,KAAKH,MAAMgM,eACjB9E,OAAQ/G,KAAKH,MAAM+L,WACnBjH,MAAO,IAhBC,eAmBI0H,GAnBJ,IAmBZ,2BAAoC,CAAC,IAA5BE,EAA2B,QAChCD,EAAmB3H,MAAMmB,KAAK,CAAC5B,GAAIqI,EAAIrI,GAAIsI,MAAO,KApB1C,8BAyBZ,OAAOhF,GAAkBiF,eAAeH,GAnBpCtD,MAAM,yCAJNA,MAAM,0C,oBA8Bd,WAG2BhJ,KAAKH,MAAMiM,UAGlC,OACI,sBAAKzM,UAAU,YAAf,UAEI,wBAAQA,UAAU,YAAlB,SACI,cAACqN,GAAA,EAAD,UAEI,cAACC,GAAA,EAAD,CAAKtN,UAAU,4BAAf,SACI,cAACuN,GAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,IAAX,SACI,qBAAKtK,MAAO,CAACuK,SAAU,QAASC,UAAW,UAA3C,uCAKhB,0BAASxK,MAAO,CAACyK,UAAW,QAA5B,UAEI,cAACP,GAAA,EAAD,UACI,cAACC,GAAA,EAAD,CAAKtN,UAAU,4BAAf,SACI,eAACuN,GAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,IAAX,UACI,cAACI,GAAA,EAAKC,MAAN,mBACA,cAACD,GAAA,EAAKE,QAAN,CACItM,KAAK,OACLuM,YAAY,kBACZjO,MAAOY,KAAKH,MAAMgM,eAClBxJ,SAAUrC,KAAKsL,8BAS/B,cAACoB,GAAA,EAAD,UACI,cAACC,GAAA,EAAD,CAAKtN,UAAU,4BAAf,SACI,eAACuN,GAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,IAAX,UACI,cAACI,GAAA,EAAKC,MAAN,qBACA,cAACD,GAAA,EAAKE,QAAN,CACItM,KAAK,OACLuM,YAAY,0BACZjO,MAAOY,KAAKH,MAAM+L,WAClBvJ,SAAUrC,KAAKqL,mBAEnB,cAACiC,GAAA,EAAD,CAAQC,QAAQ,UAAUzM,KAAK,SAASoJ,QAASlK,KAAKoL,iBAAtD,8BAQhB,yBAAS5I,MAAO,CAACyK,UAAW,QAA5B,SACI,cAACP,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,CAAKtN,UAAU,4BAAf,UACI,eAACuN,GAAA,EAAD,CAAKC,GAAI,KAAT,UACK7M,KAAKwL,aACN,cAAC8B,GAAA,EAAD,CAAQjO,UAAW,cAAekO,QAAQ,UAAUzM,KAAK,SAASoJ,QAASlK,KAAKyL,qBAAhF,kBAFJ,OAMI,cAAC6B,GAAA,EAAD,CAAQjO,UAAW,cAAekO,QAAQ,UAAUzM,KAAK,SAASoJ,QAASlK,KAAK0L,0BAAhF,wCAIJ,eAACkB,GAAA,EAAD,CAAKC,IAAE,EAACC,GAAG,KAAX,UAEI,gCACK9M,KAAKH,MAAM8L,YAAYhL,OAD5B,YAGA,eAAC,kBAAD,CAAgBhC,KAAMqB,KAAKH,MAAM8L,YAAaV,SAAS,EAAMC,OAAO,EAApE,UACI,cAAC,qBAAD,CAAmBZ,UAAU,KAAKkD,OAAO,EAAMC,UAAU,SAASC,UAAU,EAA5E,gBACA,cAAC,qBAAD,CAAmBpD,UAAU,OAAOoD,UAAU,EAA9C,qBACA,cAAC,qBAAD,CAAmBpD,UAAU,iBAAiBoD,UAAU,EAAxD,4BACA,cAAC,qBAAD,CAAmBpD,UAAU,YAAYoD,UAAU,EAAnD,uBACA,cAAC,qBAAD,CAAmBpD,UAAU,UAAUoD,UAAU,EAAjD,qBACA,cAAC,qBAAD,CAAmBpD,UAAU,iBAAiBoD,UAAU,EAAxD,0BACA,cAAC,qBAAD,CAAmBpD,UAAU,SAASoD,UAAU,EAAhD,wC,GA/MJhL,aAoOjBC,oBARf,SAAyB9C,GAErB,MAAO,KAMI8C,CAAyBwI,I,SC7OlCwC,G,kDACF,WAAYnO,GAAQ,IAAD,8BACf,cAAMA,IACDoO,iCAAmC,EAAKA,iCAAiClO,KAAtC,gBACxC,EAAKmO,gCAAkC,EAAKA,gCAAgCnO,KAArC,gBACvC,EAAKoO,oBAAsB,EAAKA,oBAAoBpO,KAAzB,gBAE3B,EAAKG,MAAQ,CACTgJ,WAAY,CAACb,gBAAgB,IAC7B+F,aAAc,EAAKvO,MAAM0E,IARd,E,qDAYnB,WAAqB,IAAD,OAChBsD,GAAkBwG,aAAahO,KAAKR,MAAM0E,IAAIzF,MAC1C,SAAAC,GACI,EAAKuB,SAAS,CACV4I,WAAYnK,EAASC,OACtB,WACC2G,QAAQC,IAAI,EAAK1F,aAGzB,SAAAsB,GACI,EAAKlB,SAAS,CACV0D,QACKxC,EAAMzC,UACHyC,EAAMzC,SAASC,MACfwC,EAAMzC,SAASC,KAAKyC,SACxBD,EAAMC,SACND,EAAME,kB,iCAM1B,SAAoBwJ,EAAMnB,EAAKuE,GAsB3B,OAlBA3I,QAAQC,IAAImE,EAAItB,QAEZ,cAAC8F,GAAA,EAAD,CACI7O,UAAU,OACV6E,GAAIwF,EAAItB,OACRtH,KAAK,WACLyM,QAAQ,kBACRY,QAASzE,EAAI8C,MACbpN,MAAOsK,EAAI8C,MACXtC,QAASlK,KAAK4N,iCACdjP,KAAM+K,EAAItB,OACVgG,KAAK,KATT,SAYM1E,EAAI8C,MAAS,mBAAGnN,UAAU,wBAA6B,mBAAGA,UAAU,qB,8CAOlF,SAAiCU,GAC7BuF,QAAQC,IAAIxF,EAAE8J,cAAc3F,IAG5B,IAJgC,EAI1BA,EAAKnE,EAAE8J,cAAc1H,QAEnB0G,EANwB,gBAMJ7I,KAAKH,OAAzBgJ,WACFwF,EAAexF,EAPW,eASfA,EAAWb,iBATI,IAShC,2BAA6C,CAAC,IAArCsG,EAAoC,QACzC,GAAGA,EAAKlG,SAAWlE,EAAG,CAClBoK,EAAK9B,MAAS8B,EAAK9B,MAAS,EAAI,EAChC,QAZwB,8BAiBhCxM,KAAKC,SAAS,CAAE4I,WAAYwF,M,6CAIhC,SAAgCtO,GAAI,IAAD,EACvB8I,EADuB,gBACH7I,KAAKH,OAAzBgJ,WACF0F,EAAoBxP,KAAKuE,MAAMvE,KAAKC,UAAU6J,IAEhDyD,EAAqB,CAAC,KAAQtM,KAAKH,MAAMgJ,WAAWzG,MAElDoM,EAAI,IAAIC,IAAI,CAAC,cAAe,QAAS,WANZ,eAQfF,EAAkBvG,iBARH,IAQ/B,2BACI,IADgD,IAA3CuE,EAA0C,QAC/C,MAAiB7G,OAAOC,KAAK4G,GAA7B,eAAmC,CAA9B,IAAImC,EAAI,KACJF,EAAEG,IAAID,WACAnC,EAAImC,IAXQ,8BAe/BpC,EAAmB3H,MAAQ4J,EAAkBvG,gBAC7CR,GAAkBoH,cAAe5O,KAAKH,MAAMkO,aAAczB,K,oBAI9D,WAAU,IAAD,EACLhH,QAAQC,IAAIvF,KAAKH,MAAMgJ,YAEvB,IAAIgG,EAAiB7O,KAAKH,MAAMgJ,WAAWb,gBAAgBlD,QAAO,SAACgK,EAAeC,GAAhB,OAAiCD,EAAgBE,KAAKC,IAAIF,EAAc,KAAI,GAE9IF,EAAiB7O,KAAKH,MAAMgJ,WAAWb,gBAAgBlD,QAAO,SAACC,EAAGwC,GAG9D,OAAOxC,EAAIwC,EAAEiF,QAEX,GAIN,IAAI0C,EAAa,EAYjB,OAXGlP,KAAKH,MAAMgJ,WAAWb,gBAAgBrH,OAAS,IAC9CuO,EAAaL,EAAiB7O,KAAKH,MAAMgJ,WAAWb,gBAAgBrH,QAExEuO,GAA0B,IAC1BA,EAAaF,KAAKG,MAAMD,EAAY,GAAK,IAEtClP,KAAKH,MAAMgJ,WAAWb,gBAAgBrH,OAMrC,sBAAKtB,UAAU,YAAf,UACI,wBAAQA,UAAU,YAAlB,SACI,uDAAgBW,KAAKH,MAAMgJ,kBAA3B,aAAgB,EAAuBzG,KAAvC,MAAgD8M,OAEpD,cAAC5B,GAAA,EAAD,CAAQpD,QAASlK,KAAK6N,gCAAtB,6BACA,+B,GArIanL,aA6LdC,aARf,SAAyB9C,GAErB,MAAO,KAMI8C,CAAyBgL,IAAzBhL,I,SC5MFpC,GAAU6O,eC+BRC,G,kDArBX,WAAY7P,GAAQ,IAAD,6BACf,cAAMA,GAENA,EAAMe,QAAQ+O,QAAO,WACjB,IAAMtO,EAAOjC,KAAKuE,MAAMzE,aAAa0E,QAAQ,SAEzCvC,IAGqB,IAlBpB,SAACuO,GACd,IACI,OAAOxQ,KAAKuE,MAAMkM,KAAKD,EAAME,MAAM,KAAK,KAC1C,MAAO1P,GACL,OAAO,MAYoB2P,CAAS1O,EAAKpC,aAElB+Q,IAAaC,KAAKC,OAC7BrQ,EAAMsQ,aAVH,E,0CAgBnB,WACI,OAAO,4B,GAlBUpN,aCPVqN,OAJf,SAAkBvQ,GACd,OAAO,sCCsBHwQ,GAAcC,UAAdD,UAGFE,G,kDACF,WAAY1Q,GAAQ,IAAD,8BACf,cAAMA,IACDoO,iCAAmC,EAAKA,iCAAiClO,KAAtC,gBACxC,EAAKmO,gCAAkC,EAAKA,gCAAgCnO,KAArC,gBACvC,EAAKyQ,iCAAmC,EAAKA,iCAAiCzQ,KAAtC,gBACxC,EAAK0Q,YAAc,EAAKA,YAAY1Q,KAAjB,gBAGnB4F,QAAQC,IAAI,sBACZD,QAAQC,IAAI,EAAK/F,OACjB8F,QAAQC,IAAI,sBAGZ,EAAK1F,MAAQ,CACTwQ,wBAAyB,OAAQ,EAAK7Q,MACtCuO,aAAc,EAAKvO,MAAM0E,GACzB2H,eAAgB,GAEhB7D,gBAAgB,GAChBsI,aAAc,IAAI7B,IAClB8B,cAAc,EACdC,eAAgB,CACZC,SAAU,GACVC,gBAAiB,IAErBC,QAAS,IAIb,EAAKC,cAAgB,KA7BN,E,qDAgCnB,WAAqB,IAAD,OACZC,EAAa,QACcC,GAA3B9Q,KAAKH,MAAMkO,eACX8C,EAAa,CAAC,aAAgB7Q,KAAKH,MAAMkO,eAG7CvG,GAAkBuJ,QAAQF,GAAYpS,MAClC,SAAAC,GAEI,IAAIsS,EAAO,aAAO,IAAIvC,IAAI/P,EAAS0F,KAAI,SAAA6M,GAAI,OAAIA,EAAK7I,YACpD3B,GAAmBuK,GAASvS,MAAK,SAACqJ,GAE9B,IAAMoJ,EAAsBnJ,GAAiC,EAAKlI,MAAMmI,iBACxE,EAAK/H,SAAS,CACV+H,gBAAiBkJ,EACjBV,eAAgB,EAAKJ,YAAYc,KAClC,WACC,EAAKC,oBAIb,EAAKlR,SAAS,CACV+H,gBAAiBtJ,EACjB8R,eAAgB,EAAKJ,YAAY1R,KAElC,WAEC,EAAKyS,oBAGb,SAAAhQ,GACImE,QAAQC,IAAIpE,GACZ6H,MAAM,c,yBAKlB,SAAYrE,GACR,IAAM8L,EAAW,aAAI,IAAIhC,IAAI9J,EAAMP,KAAI,SAAA6M,GAAI,OAAIA,EAAKG,aAAWvK,OACzDwK,EAAe,GACrBZ,EAAS7K,SAAQ,SAAAqL,GACbI,EAAaJ,GAAQA,KAGGvL,OAAO4L,OAAP,MAAA5L,OAAM,CAAQ,IAAR,oBAAe+K,EAASrM,KAAI,SAACY,GAAD,uBAAUA,EAAIA,SAA5E,IAGM0L,EAAkB,aAAI,IAAIjC,IAAI9J,EAAMP,KAAI,SAAA6M,GAAI,OAAIA,EAAKpF,oBAAkBhF,OACvE0K,EAAsB,GAM5B,OALAb,EAAgB9K,SAAQ,SAAAqL,GACpBM,EAAoBN,GAAQA,KAIzB,CACHR,SAAUY,EACVX,gBAAiBa,K,8CAIzB,SAAiCxR,GAAI,IAAD,OAC1BmE,EAAKnE,EAAE8J,cAAc1H,QACtBmO,EAAgBtQ,KAAKH,MAArByQ,aACDkB,EAAWxR,KAAKH,MAAMmI,gBAAgByJ,MAAK,SAAAR,GAAI,OAAIA,EAAKS,sBAAwBxN,KACpFsN,EAAShF,MAASgF,EAAShF,MAAS,EAAI,EACxC8D,EAAaqB,IAAIzN,GAGjBlE,KAAKC,SAAS,CAAE+H,gBAAiBhI,KAAKH,MAAMmI,gBAAkBuI,cAAevQ,KAAKH,MAAM0Q,aAAcD,aAAaA,IAAe,WAC9HhL,QAAQC,IAAI,cAAe,EAAK1F,MAAMmI,gBAAgB,GAAGwE,OACzDlH,QAAQC,IAAI,cAAe,EAAK1F,MAAM0Q,cACtCjL,QAAQC,IAAI,cAAe,EAAK1F,MAAMyQ,cACtC,EAAKa,cACL,EAAKtD,gCAAgC,a,8CAG7C,SAAiC9N,GAAI,IAAD,OAC1BmE,EAAKnE,EAAE8J,cAAc1H,QAEvBqP,EAAWxR,KAAKH,MAAMmI,gBAAgByJ,MAAK,SAAAR,GAAI,OAAIA,EAAKS,sBAAwBxN,KACpFsN,EAASI,WAAaJ,EAASI,UAC/B5R,KAAKH,MAAMyQ,aAAaqB,IAAIzN,GAG5BlE,KAAKC,SAAS,CAAE+H,gBAAiBhI,KAAKH,MAAMmI,gBAAkBuI,cAAevQ,KAAKH,MAAM0Q,eAAe,WACnG,EAAKY,mB,6CAOb,SAAgCpR,GAAI,IAAD,OACvBiI,EADuB,gBACEhI,KAAKH,OAA9BmI,gBAEF6J,EAAc,aAAK7R,KAAKH,MAAMyQ,cAAclM,KAAI,SAACgE,GAEnD,OADWJ,EAAgByJ,MAAK,SAAAR,GAAI,OAAIA,EAAKS,sBAAwBtJ,QAMzEZ,GAAkBsK,qBAAsBD,GACnCpT,MAAK,SAACC,GACH,EAAKuB,SAAS,CAAEqQ,aAAa,IAAI7B,MAAS,WACtC,EAAK0C,oBAGZzP,OAAM,SAACuH,GACJD,MAAMC,Q,oBAKlB,WAAU,IAAD,OAIWjJ,KAAKH,MAAM2Q,eAAeC,SAJrC,MAM8BzQ,KAAKH,MAAlCmI,EAND,EAMCA,gBAAiB2I,EANlB,EAMkBA,QAInB9E,GAHe7L,KAAKR,MAAhB6F,OACcsL,EAAQC,eAAgBD,EAAQC,cAAcmB,UAE/C,IAClB/R,KAAKH,MAAM2Q,eAAeE,iBAAmB,KAC5C7E,EAAiBnG,OAAOC,KAAK3F,KAAKH,MAAM2Q,eAAeE,iBAAiB,IAG5E,IAAIxB,EAAa,EACbL,EAAiB7O,KAAKH,MAAMmI,gBAAgBlD,QAAO,SAACC,EAAGwC,GAAS,OAAOxC,EAAIwC,EAAEiF,QAAW,GACzFxE,EAAgBrH,OAAS,IACxBuO,EAAaL,EAAiB7G,EAAgBrH,QAElDuO,GAA0B,IAC1BA,EAAaF,KAAKG,MAAMD,EAAY,GAAK,IAKzC,IAAM7E,EAAU,CAEZ,CACIC,UAAW,iBACXC,KAAM,kBACNyH,YAAY,EAKZjL,OAAQkL,wBAAa,CAEjBC,QAASlS,KAAKH,MAAM2Q,eAAeE,kBAKvC7J,MAAM,GAEV,CACIyD,UAAW,aACXC,KAAM,SACNyH,YAAY,EACZG,YAAa,SAACC,EAAOC,GACjB,MAAO,CAAEC,MAAO,QAEpBzL,MAAM,GAEV,CACIyD,UAAW,SACXC,KAAM,SACNyH,YAAY,EACZO,QAAQ,EACR1L,MAAM,GAEV,CACIyD,UAAW,OACXC,KAAM,OACNyH,YAAY,EACZnL,MAAM,GAKV,CACIyD,UAAW,SACXC,KAAM,SACNyH,YAAY,EACZnL,MAAM,EACNsL,YAAa,SAACC,EAAOC,GACjB,MAAO,CAAEC,MAAO,UAGxB,CACIhI,UAAW,UACXC,KAAM,UACNyH,YAAY,EACZxP,MAAO,SAACkH,EAAKC,GACT,MAAO,CACH6I,WAAY,SACZC,aAAc,WACdC,SAAU,WAGlB7L,MAAM,EACNE,OAAQkL,wBAAa,CAEjBC,QAASlS,KAAKH,MAAM2Q,eAAeC,YAM3C,CACInG,UAAW,iBACXC,KAAM,eACNyH,YAAY,EACZnL,MAAM,EACNsL,YAAa,SAACC,EAAOC,GACjB,MAAO,CAAEC,MAAO,SAIxB,CACIhI,UAAW,sBACXC,KAAM,sBACNgI,QAAQ,EACR1L,MAAM,GAGV,CACIyD,UAAW,cACXC,KAAM,MACN4H,YAAa,SAACC,EAAOC,GACjB,MAAO,CAAEC,MAAO,QAEpBzL,MAAM,GAGV,CACIyD,UAAW,eACXC,KAAM,KACN4H,YAAa,SAACC,EAAOC,GACjB,MAAO,CAAEC,MAAO,QAEpBzL,MAAM,GAEV,CACIyD,UAAW,eACXC,KAAM,OACN4H,YAAa,SAACC,EAAOC,GACjB,MAAO,CAAEC,MAAO,QAEpBzL,MAAM,GAEV,CACIyD,UAAW,QACXC,KAAM,YACNxD,OAAQkL,wBAAa,CACjBC,QAAS,CACL,CAAE9S,MAAO,EAAGuT,MAAO,KACnB,CAAEvT,MAAO,EAAGuT,MAAO,QAG3BR,YAAa,SAACC,EAAOC,GACjB,MAAO,CAAEC,MAAO,QAEpBxH,gBAAiB,CAAC9C,gBAAiBhI,KAAKH,MAAMmI,gBAAiB4K,QAAS5S,KAAKH,MAAM0Q,cACnF3F,UAAW,SAACC,EAAMnB,EAAKC,EAAUmB,GAC7B,IACM0G,EADgB1G,EAAgB9C,gBACPyJ,MAAK,SAAAR,GAAI,OAAIA,EAAKS,sBAAwBhI,EAAIgI,uBAC7E,OACI,cAACxD,GAAA,EAAD,CACI7O,UAAU,OACV6E,GAAIwF,EAAIgI,oBACR5Q,KAAK,WACLyM,QAAQ,kBACRY,QAA6B,GAAnBqD,EAAShF,MACnBpN,MAAOoS,EAAShF,MAChBtC,QAAS,EAAK0D,iCACdjP,KAAM+K,EAAItB,OACVgG,KAAK,KATT,SAWMoD,EAAShF,MAAS,mBAAGnN,UAAU,4BAAiC,mBAAGA,UAAU,qBAO/F,CACIiL,UAAW,YACXC,KAAM,YACNxD,OAAQkL,wBAAa,CACjBC,QAAS,CACL,CAAE9S,OAAO,EAAOuT,MAAO,KACvB,CAAEvT,OAAO,EAAMuT,MAAO,QAG9BR,YAAa,SAACC,EAAOC,GACjB,MAAO,CAAEC,MAAO,QAEpBxH,gBAAiB,CAAC9C,gBAAiBhI,KAAKH,MAAMmI,gBAAiB4K,QAAS5S,KAAKH,MAAM0Q,cACnF3F,UAAW,SAACC,EAAMnB,EAAKC,EAAUmB,GAC7B,IACM0G,EADgB1G,EAAgB9C,gBACPyJ,MAAK,SAAAR,GAAI,OAAIA,EAAKS,sBAAwBhI,EAAIgI,uBAC7E,OACI,cAACxD,GAAA,EAAD,CACI7O,UAAU,OACV6E,GAAIwF,EAAIgI,oBACR5Q,KAAK,WACLyM,QAAQ,kBACRY,QAASqD,EAASI,UAClBxS,MAAOoS,EAASI,UAChB1H,QAAS,EAAKiG,iCACdxR,KAAM+K,EAAItB,OACVgG,KAAK,KATT,SAWMoD,EAASI,UAAa,mBAAGvS,UAAU,4BAAiC,mBAAGA,UAAU,sBAiBvG,OACI,sBAAKA,UAAU,kBAAf,UAGI,wBAAQA,UAAU,YAAlB,SACKW,KAAKH,MAAMwQ,wBACR,6CAAgBxE,EAAhB,MAAmCqD,KAClC,OAQT,eAACvC,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAKiG,WAAY,cAAjB,SACI,qDAEJ,cAACjG,GAAA,EAAD,CAAKC,GAAI,EAAT,SACI,cAACS,GAAA,EAAD,CAAQC,QAAQ,UAAUrD,QAASlK,KAAK6N,gCAAxC,uBAOR,cAAC,KAAD,CAEIlP,KAAMqJ,EACNqC,QAASA,EACTW,SAAU,sBACVC,SAAS,EACTC,OAAO,EACP4H,UAAY,CACRC,SAAU,aACVC,UAAW,IACXC,cAAc,EACdC,WAAW,GAEfC,WAAW,EAIXC,QAAM,EAjBV,SAoBQ,SAAA5T,GAAK,OACD,gCACI,cAACwQ,GAAD,gBAAgBxQ,EAAM6T,cACtB,uBACA,cAAC,KAAD,6BACS7T,EAAM8T,WADf,IAGIC,OAAQ,MACRzI,gBAAkB,EAAKjL,MAAMmI,gBAC7BjB,OAASyM,OACTC,WAAaC,KAAkB,CAACC,gBAAiB,CAC7C,CACIpJ,KAAM,KAAMnL,MAAO,IAErB,CACEmL,KAAM,KAAMnL,MAAO,IAGnB,CACAmL,KAAM,MAAOnL,MAAO,EAAKS,MAAMmI,gBAAgBrH,2B,GAlb1D+B,aA+clBC,oBATf,SAAyB9C,GAGrB,MAAO,CACHwF,OAHexF,EAAXwF,UAQG1C,CAAyBuN,IC5dzB0D,OARf,SAA+BpU,GAAQ,IAC3BqU,EAAiBC,cAAjBD,aACR,OAEI,aADA,CACC,GAAD,CAAoBA,aAAcA,KCI3BD,OARf,SAA+BpU,GAAQ,IAC3B0E,EAAO4P,cAAP5P,GACR,OAEI,aADA,CACC,GAAD,CAAoBA,GAAIA,KCqB1B6P,G,kDACJ,WAAYvU,GAAQ,IAAD,8BACjB,cAAMA,IACDsQ,OAAS,EAAKA,OAAOpQ,KAAZ,gBAEd,EAAKG,MAAQ,CACXmU,oBAAoB,EACpBC,gBAAgB,EAChBlQ,iBAAa+M,GAGfvQ,GAAQ+O,QAAO,SAAC9N,GACdhC,EAAMc,SCnCuB,CAC/BQ,KAAM7C,ODuBW,E,qDAenB,WACE,IAAM+C,EAAOhB,KAAKR,MAAMwB,KAEpBA,IACFsE,QAAQC,IAAIvE,EAAKmD,OAEjBnE,KAAKC,SAAS,CACZ8D,YAAa/C,EACbgT,mBAAoBhT,EAAKmD,MAAM8C,SAAS,kBACxCgN,eAAgBjT,EAAKmD,MAAM8C,SAAS,mB,oBAK1C,WACEjH,KAAKR,MAAMc,U3BkBa,SAACA,GACzBM,EAAYsT,SAEZ5T,EAAS,CACLQ,KAAM/C,O2BrBViC,KAAKC,SAAS,CACZ+T,oBAAoB,EACpBC,gBAAgB,EAChBlQ,iBAAa+M,M,oBAIjB,WAAU,IAAD,EACqD9Q,KAAKH,MAAzDkE,EADD,EACCA,YACF/C,GAFC,EACcgT,mBADd,EACkCC,eAC5BjU,KAAKR,MAAMwB,MAKxB,OAHAsE,QAAQC,IAAR,OAAYvE,QAAZ,IAAYA,OAAZ,EAAYA,EAAMmD,OAClBmB,QAAQC,IAAI,QAGR,cAAC,IAAD,CAAQhF,QAASA,GAAjB,SACE,gCACE,sBAAKlB,UAAU,2CAAf,UACE,cAAC,IAAD,CAAMuC,GAAI,IAAKvC,UAAU,eAAzB,sBAIA,sBAAKA,UAAU,qBAAf,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMuC,GAAI,QAASvC,UAAU,WAA7B,qBAKG,OAAJ2B,QAAI,IAAJA,OAAA,EAAAA,EAAMmD,MAAM8C,SAAS,oBAClB,oBAAI5H,UAAU,WAAd,SACE,cAAC,IAAD,CAAMuC,GAAI,OAAQvC,UAAU,WAA5B,gCAMD,OAAJ2B,QAAI,IAAJA,OAAA,EAAAA,EAAMmD,MAAM8C,SAAS,gBAClB,oBAAI5H,UAAU,WAAd,SACE,cAAC,IAAD,CAAMuC,GAAI,SAAUvC,UAAU,WAA9B,2BAMN,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMuC,GAAI,eAAgBvC,UAAU,WAApC,2BAMD0E,GACG,cAAC,IAAMlC,SAAP,UACE,oBAAIxC,UAAU,WAAd,SACE,cAAC,IAAD,CAAMuC,GAAI,QAASvC,UAAU,WAA7B,yBAQT0E,EACG,sBAAK1E,UAAU,qBAAqBmD,MAAO,CAAC2R,WAAY,QAAxD,UACE,oBAAI9U,UAAU,WAAd,SACE,cAAC,IAAD,CAAMuC,GAAI,WAAYvC,UAAU,WAAhC,SACG0E,EAAY1F,aAGjB,oBAAIgB,UAAU,WAAd,SACE,cAAC,IAAD,CAAMuC,GAAI,QAASvC,UAAU,WAA7B,oBAIF,oBAAIA,UAAU,WAAd,SACE,mBAAG+U,KAAK,SAAS/U,UAAU,WAAW6K,QAASlK,KAAK8P,OAApD,yBAMJ,sBAAKzQ,UAAU,qBAAf,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMuC,GAAI,SAAUvC,UAAU,WAA9B,qBAKF,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMuC,GAAI,YAAavC,UAAU,WAAjC,6BAQV,qBAAKA,UAAU,OAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOgV,OAAK,EAACC,KAAM,IAAKC,QAAS,cAAC,EAAD,MACjC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAM,QAASC,QAAS,cAAC,EAAD,MAErC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,SAASC,QAAS,cAAC,EAAD,MACpC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,YAAYC,QAAS,cAAC,EAAD,MACvC,cAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,WAAWC,QAAS,cAAC,EAAD,MACtC,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,EAAD,MAC7B,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,EAAD,MAC5B,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAC,EAAD,MAE9B,cAAC,IAAD,CAAOD,KAAK,eAAeC,QAAS,cAAC,GAAD,MACpC,cAAC,IAAD,CAAOD,KAAK,qBAAqBC,QAAS,cAAC,GAAD,MAE1C,cAAC,IAAD,CAAOD,KAAK,kBAAkBC,QAAS,cAAC,GAAD,MAEvC,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,GAAD,MAE7B,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,GAAD,WAO7B,cAAC,GAAD,CAAYzE,OAAQ9P,KAAK8P,OAASvP,QAASA,c,GA5JrCmC,aA0KHC,oBAPf,SAAyB9C,GAEvB,MAAO,CACLmB,KAFenB,EAAM+C,KAAf5B,QAMK2B,CAAyBoR,IE5LzBS,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBjW,MAAK,YAAkD,IAA/CkW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUjP,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGNkP,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.d9e7770a.chunk.js","sourcesContent":["export const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\nexport const REGISTER_FAIL = \"REGISTER_FAIL\";\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGIN_FAIL = \"LOGIN_FAIL\";\nexport const LOGOUT = \"LOGOUT\";\n\nexport const SET_MESSAGE = \"SET_MESSAGE\";\nexport const CLEAR_MESSAGE = \"CLEAR_MESSAGE\";\n\nexport const SET_TCG_CARDS = \"SET_TCG_CARDS\";\nexport const APPEND_TCG_CARDS = \"APPEND_TCG_CARDS\";","import axios from \"axios\";\n\nconst API_URL = \"http://localhost:8080/api/auth/\";\n\nclass AuthService {\n    login(username, password) {\n        return axios\n            .post(API_URL + \"signin\", { username, password })\n            .then((response) => {\n                if (response.data.accessToken) {\n                    localStorage.setItem(\"user\", JSON.stringify(response.data));\n                }\n\n                return response.data;\n            });\n    }\n\n    logout() {\n        localStorage.removeItem(\"user\");\n    }\n\n    register(username, email, password) {\n        return axios.post(API_URL + \"signup\", {\n            username,\n            email,\n            password,\n        });\n    }\n}\n\nexport default new AuthService();","import React, { Component } from \"react\";\nimport { Navigate } from 'react-router-dom';\n\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\n\nimport { connect } from \"react-redux\";\nimport { login } from \"../actions/auth\";\n\nconst required = (value) => {\n    if (!value) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required!\n            </div>\n        );\n    }\n};\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.handleLogin = this.handleLogin.bind(this);\n        this.onChangeUsername = this.onChangeUsername.bind(this);\n        this.onChangePassword = this.onChangePassword.bind(this);\n\n        this.state = {\n            username: \"\",\n            password: \"\",\n            loading: false,\n        };\n    }\n\n    onChangeUsername(e) {\n        this.setState({\n            username: e.target.value,\n        });\n    }\n\n    onChangePassword(e) {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    handleLogin(e) {\n        e.preventDefault();\n\n        this.setState({\n            loading: true,\n        });\n\n        this.form.validateAll();\n\n        const { dispatch, history } = this.props;\n\n        if (this.checkBtn.context._errors.length === 0) {\n            dispatch(login(this.state.username, this.state.password))\n                .then(() => {\n                    // history.push(\"/profile\");\n                    window.location.reload();\n                })\n                .catch(() => {\n                    this.setState({\n                        loading: false\n                    });\n                });\n        } else {\n            this.setState({\n                loading: false,\n            });\n        }\n    }\n\n    render() {\n        const { isLoggedIn, message } = this.props;\n\n        if (isLoggedIn) {\n            return <Navigate to=\"/profile\" />;\n        }\n\n        return (\n            <React.Fragment>\n                <div className=\"col-md-12\">\n                    <div className=\"card card-container\">\n                        <img\n                            src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                            alt=\"profile-img\"\n                            className=\"profile-img-card\"\n                        />\n\n                        <Form\n                            onSubmit={this.handleLogin}\n                            ref={(c) => {\n                                this.form = c;\n                            }}\n                        >\n                            <div className=\"form-group\">\n                                <label htmlFor=\"username\">Username</label>\n                                <Input\n                                    type=\"text\"\n                                    className=\"form-control\"\n                                    name=\"username\"\n                                    value={this.state.username}\n                                    onChange={this.onChangeUsername}\n                                    validations={[required]}\n                                />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <label htmlFor=\"password\">Password</label>\n                                <Input\n                                    type=\"password\"\n                                    className=\"form-control\"\n                                    name=\"password\"\n                                    value={this.state.password}\n                                    onChange={this.onChangePassword}\n                                    validations={[required]}\n                                />\n                            </div>\n\n                            <div className=\"form-group\">\n                                <button\n                                    className=\"btn btn-primary btn-block\"\n                                    disabled={this.state.loading}\n                                >\n                                    {this.state.loading && (\n                                        <span className=\"spinner-border spinner-border-sm\"></span>\n                                    )}\n                                    <span>Login</span>\n                                </button>\n                            </div>\n\n                            {message && (\n                                <div className=\"form-group\">\n                                    <div className=\"alert alert-danger\" role=\"alert\">\n                                        {message}\n                                    </div>\n                                </div>\n                            )}\n                            <CheckButton\n                                style={{ display: \"none\" }}\n                                ref={(c) => {\n                                    this.checkBtn = c;\n                                }}\n                            />\n                        </Form>\n                    </div>\n                </div>\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    const { isLoggedIn } = state.auth;\n    const { message } = state.message;\n    return {\n        isLoggedIn,\n        message\n    };\n}\n\nexport default connect(mapStateToProps)(Login);","import {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n    SET_MESSAGE,\n} from \"./types\";\n\nimport AuthService from \"../services/auth.service\";\n\nexport const register = (username, email, password) => (dispatch) => {\n    return AuthService.register(username, email, password).then(\n        (response) => {\n            dispatch({\n                type: REGISTER_SUCCESS,\n            });\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: response.data.message,\n            });\n\n            return Promise.resolve();\n        },\n        (error) => {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            dispatch({\n                type: REGISTER_FAIL,\n            });\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: message,\n            });\n\n            return Promise.reject();\n        }\n    );\n};\n\nexport const login = (username, password) => (dispatch) => {\n    return AuthService.login(username, password).then(\n        (data) => {\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: { user: data },\n            });\n\n            return Promise.resolve();\n        },\n        (error) => {\n            const message =\n                (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                error.message ||\n                error.toString();\n\n            dispatch({\n                type: LOGIN_FAIL,\n            });\n\n            dispatch({\n                type: SET_MESSAGE,\n                payload: message,\n            });\n\n            return Promise.reject();\n        }\n    );\n};\n\nexport const logout = () => (dispatch) => {\n    AuthService.logout();\n\n    dispatch({\n        type: LOGOUT,\n    });\n};","import React, { Component } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport { isEmail } from \"validator\";\n\nimport { connect } from \"react-redux\";\nimport { register } from \"../actions/auth\";\n\nconst required = (value) => {\n    if (!value) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This field is required!\n            </div>\n        );\n    }\n};\n\nconst email = (value) => {\n    if (!isEmail(value)) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                This is not a valid email.\n            </div>\n        );\n    }\n};\n\nconst vusername = (value) => {\n    if (value.length < 3 || value.length > 20) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                The username must be between 3 and 20 characters.\n            </div>\n        );\n    }\n};\n\nconst vpassword = (value) => {\n    if (value.length < 6 || value.length > 40) {\n        return (\n            <div className=\"alert alert-danger\" role=\"alert\">\n                The password must be between 6 and 40 characters.\n            </div>\n        );\n    }\n};\n\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.handleRegister = this.handleRegister.bind(this);\n        this.onChangeUsername = this.onChangeUsername.bind(this);\n        this.onChangeEmail = this.onChangeEmail.bind(this);\n        this.onChangePassword = this.onChangePassword.bind(this);\n\n        this.state = {\n            username: \"\",\n            email: \"\",\n            password: \"\",\n            successful: false,\n        };\n    }\n\n    onChangeUsername(e) {\n        this.setState({\n            username: e.target.value,\n        });\n    }\n\n    onChangeEmail(e) {\n        this.setState({\n            email: e.target.value,\n        });\n    }\n\n    onChangePassword(e) {\n        this.setState({\n            password: e.target.value,\n        });\n    }\n\n    handleRegister(e) {\n        e.preventDefault();\n\n        this.setState({\n            successful: false,\n        });\n\n        this.form.validateAll();\n\n        if (this.checkBtn.context._errors.length === 0) {\n            this.props\n                .dispatch(\n                    register(this.state.username, this.state.email, this.state.password)\n                )\n                .then(() => {\n                    this.setState({\n                        successful: true,\n                    });\n                })\n                .catch(() => {\n                    this.setState({\n                        successful: false,\n                    });\n                });\n        }\n    }\n\n    render() {\n        const { message } = this.props;\n\n        return (\n            <div className=\"col-md-12\">\n                <div className=\"card card-container\">\n                    <img\n                        src=\"//ssl.gstatic.com/accounts/ui/avatar_2x.png\"\n                        alt=\"profile-img\"\n                        className=\"profile-img-card\"\n                    />\n\n                    <Form\n                        onSubmit={this.handleRegister}\n                        ref={(c) => {\n                            this.form = c;\n                        }}\n                    >\n                        {!this.state.successful && (\n                            <div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"username\">Username</label>\n                                    <Input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        name=\"username\"\n                                        value={this.state.username}\n                                        onChange={this.onChangeUsername}\n                                        validations={[required, vusername]}\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\">Email</label>\n                                    <Input\n                                        type=\"text\"\n                                        className=\"form-control\"\n                                        name=\"email\"\n                                        value={this.state.email}\n                                        onChange={this.onChangeEmail}\n                                        validations={[required, email]}\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\">Password</label>\n                                    <Input\n                                        type=\"password\"\n                                        className=\"form-control\"\n                                        name=\"password\"\n                                        value={this.state.password}\n                                        onChange={this.onChangePassword}\n                                        validations={[required, vpassword]}\n                                    />\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <button className=\"btn btn-primary btn-block\">Sign Up</button>\n                                </div>\n                            </div>\n                        )}\n\n                        {message && (\n                            <div className=\"form-group\">\n                                <div className={ this.state.successful ? \"alert alert-success\" : \"alert alert-danger\" } role=\"alert\">\n                                    {message}\n                                </div>\n                            </div>\n                        )}\n                        <CheckButton\n                            style={{ display: \"none\" }}\n                            ref={(c) => {\n                                this.checkBtn = c;\n                            }}\n                        />\n                    </Form>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    const { message } = state.message;\n    return {\n        message,\n    };\n}\n\nexport default connect(mapStateToProps)(Register);","export default function authHeader() {\n    const user = JSON.parse(localStorage.getItem('user'));\n\n    if (user && user.accessToken) {\n        // for Node.js Express back-end\n        return { 'x-access-token': user.accessToken };\n    } else {\n        return {};\n    }\n}","// const API_URL = 'http://' + process.env.BACKEND_SERVER + '/api/';\nconst API_URL = 'http://' + 'localhost:8080' + '/api/';\n// BACKEND_SERVER=localhost:8080\n// env['BACKEND_SERVER'] = 'localhost:8080';\nexport { API_URL }","import axios from 'axios';\nimport authHeader from './auth-header';\nimport { API_URL } from '../config/api_config'\n\n// const API_URL = 'http://localhost:8080/api/test/';\n\nclass UserService {\n    getPublicContent() {\n        return axios.get(API_URL + 'all');\n    }\n\n    getUserBoard() {\n        return axios.get(API_URL + 'user', { headers: authHeader() });\n    }\n\n    getModeratorBoard() {\n        return axios.get(API_URL + 'mod', { headers: authHeader() });\n    }\n\n    getAdminBoard() {\n        return axios.get(API_URL + 'admin', { headers: authHeader() });\n    }\n}\n\nexport default new UserService();","import React, { Component } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nexport default class Home extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            content: \"\"\n        };\n    }\n\n    componentDidMount() {\n        UserService.getPublicContent().then(\n            response => {\n                this.setState({\n                    content: response.data\n                });\n            },\n            error => {\n                this.setState({\n                    content:\n                        (error.response && error.response.data) ||\n                        error.message ||\n                        error.toString()\n                });\n            }\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    <h3>{this.state.content}</h3>\n                </header>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport { Navigate } from 'react-router-dom';\nimport { connect } from \"react-redux\";\n\nclass Profile extends Component {\n\n    render() {\n        const { user: currentUser } = this.props;\n\n        if (!currentUser) {\n            return <Navigate to=\"/login\" />;\n        }\n\n        return (\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    <h3>\n                        <strong>{currentUser.username}</strong> Profile\n                    </h3>\n                </header>\n                <p>\n                    <strong>Token:</strong> {currentUser.accessToken.substring(0, 20)} ...{\" \"}\n                    {currentUser.accessToken.substr(currentUser.accessToken.length - 20)}\n                </p>\n                <p>\n                    <strong>Id:</strong> {currentUser.id}\n                </p>\n                <p>\n                    <strong>Email:</strong> {currentUser.email}\n                </p>\n                <strong>Authorities:</strong>\n                <ul>\n                    {currentUser.roles &&\n                    currentUser.roles.map((role, index) => <li key={index}>{role}</li>)}\n                </ul>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    const { user } = state.auth;\n    return {\n        user,\n    };\n}\n\nexport default connect(mapStateToProps)(Profile);","import React, { Component } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nexport default class BoardUser extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            content: \"\"\n        };\n    }\n\n    componentDidMount() {\n        UserService.getUserBoard().then(\n            response => {\n                this.setState({\n                    content: response.data\n                });\n            },\n            error => {\n                this.setState({\n                    content:\n                        (error.response &&\n                            error.response.data &&\n                            error.response.data.message) ||\n                        error.message ||\n                        error.toString()\n                });\n            }\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    <h3>{this.state.content}</h3>\n                </header>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nexport default class BoardUser extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            content: \"\"\n        };\n    }\n\n    componentDidMount() {\n        UserService.getModeratorBoard().then(\n            response => {\n                this.setState({\n                    content: response.data\n                });\n            },\n            error => {\n                this.setState({\n                    content:\n                        (error.response &&\n                            error.response.data &&\n                            error.response.data.message) ||\n                        error.message ||\n                        error.toString()\n                });\n            }\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    <h3>{this.state.content}</h3>\n                </header>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nexport default class BoardUser extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            content: \"\"\n        };\n    }\n\n    componentDidMount() {\n        UserService.getAdminBoard().then(\n            response => {\n                this.setState({\n                    content: response.data\n                });\n            },\n            error => {\n                this.setState({\n                    content:\n                        (error.response &&\n                            error.response.data &&\n                            error.response.data.message) ||\n                        error.message ||\n                        error.toString()\n                });\n            }\n        );\n    }\n\n    render() {\n        return (\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    <h3>{this.state.content}</h3>\n                </header>\n            </div>\n        );\n    }\n}","import {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n} from \"../actions/types\";\n\nconst user = JSON.parse(localStorage.getItem(\"user\"));\n\nconst initialState = user\n    ? { isLoggedIn: true, user }\n    : { isLoggedIn: false, user: null };\n\nexport default function (state = initialState, action) {\n    const { type, payload } = action;\n\n    switch (type) {\n        case REGISTER_SUCCESS:\n            return {\n                ...state,\n                isLoggedIn: false,\n            };\n        case REGISTER_FAIL:\n            return {\n                ...state,\n                isLoggedIn: false,\n            };\n        case LOGIN_SUCCESS:\n            return {\n                ...state,\n                isLoggedIn: true,\n                user: payload.user,\n            };\n        case LOGIN_FAIL:\n            return {\n                ...state,\n                isLoggedIn: false,\n                user: null,\n            };\n        case LOGOUT:\n            return {\n                ...state,\n                isLoggedIn: false,\n                user: null,\n            };\n        default:\n            return state;\n    }\n}","import { SET_MESSAGE, CLEAR_MESSAGE } from \"../actions/types\";\n\nconst initialState = {};\n\nexport default function (state = initialState, action) {\n    const { type, payload } = action;\n\n    switch (type) {\n        case SET_MESSAGE:\n            return { message: payload };\n\n        case CLEAR_MESSAGE:\n            return { message: \"\" };\n\n        default:\n            return state;\n    }\n}","import {\n    SET_TCG_CARDS,\n    APPEND_TCG_CARDS\n} from \"../actions/types\";\n\n\n\nconst cards = JSON.parse(localStorage.getItem(\"cards\")) || []\nconst generateCardsDict = function (cards){\n    let cards_dict = cards.reduce((a,x) => ({...a, [x.id]: x}), {})\n    return {\n        cards: {\n            array: cards,\n            dict: cards_dict,\n        }\n    }\n}\n\nconst initialState = generateCardsDict(cards);\n\nexport default function (state = initialState, action) {\n\n\n    const { type, payload } = action;\n\n    switch (type) {\n        case SET_TCG_CARDS:\n            console.log(\"SET_TCG_CARDS -> \", payload)\n            return {\n                ...state,\n                cards: generateCardsDict(payload)\n            };\n\n        case APPEND_TCG_CARDS:\n            let new_card_array = [...state.cards.array];\n            let state_card_ids = Object.keys(state.cards.dict);\n\n            payload.forEach(function (new_card) {\n                if(!(new_card.id in state_card_ids)){\n                    new_card_array.push(new_card);\n                }\n            });\n\n            localStorage.setItem('cards', JSON.stringify(new_card_array));\n\n            return {\n                ...state,\n                ...generateCardsDict( new_card_array )\n            };\n\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport auth from \"./auth\";\nimport message from \"./message\";\nimport tcgApi from \"./tcgApi\";\n\nexport default combineReducers({\n    auth,\n    message,\n    tcgApi,\n});","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers\";\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;","// import {createBrowserHistory} from \"./history\";\nimport CollectionService from \"../services/collection.service\"\nimport pokemon from \"pokemontcgsdk\";\nimport {appendCards, setCards} from \"../actions/tcgApi\";\nimport store from \"../store\";\npokemon.configure({apiKey: '4440c304-d5c0-4939-b533-5befa084795c'})\n\n// export const history = createBrowserHistory();\n\n// export const loadCardsInLocal = (ids_array) => (dispatch) => {\nexport const getCardsNotInLocal = (ids_array) => {\n    return new Promise((resolve, reject) => {\n        // Get Cards from the Redux store, read from Local storage\n        const {tcgApi} = store.getState();\n        // const ids_in_store = tcgApi.cards.map((card) => {return card.id})\n        const ids_in_store = Object.keys(tcgApi.cards.dict);\n        ids_in_store.sort();\n        ids_array.sort();\n        // ids_array = ids_array.slice(0,  90)\n\n        console.log(ids_in_store);\n        console.log(ids_array);\n        const ids_needed = ids_array.filter(function(id) {\n            let in_store = ids_in_store.includes(id);\n            if(!in_store){\n\n            }\n            return !in_store;\n\n        })\n        // debugger;\n\n        console.log(`${ids_needed.length} cards to be obtained from API`);\n        if(ids_needed.length === 0){\n            return;\n        }\n        else{\n            debugger;\n        }\n\n        var i,j, temporary, chunk = 100, promises = [];\n        for (i = 0,j = ids_array.length; i < j; i += chunk) {\n            temporary = ids_needed.slice(i, i + chunk);\n\n            let ids_query = temporary.reduce((a, b) => (`id:${b} OR ${a}`), \"\");\n            ids_query = ids_query.slice(0, -4)\n            console.log(ids_query);\n            let kek = 1\n            if(ids_query !== ''){\n                promises.push( CollectionService.postTcgApiQuery(ids_query) )\n            }\n\n\n        }\n\n        Promise.all(promises).then((api_pull_chunk) => {\n            let cards = [];\n            for (i = 0; i < api_pull_chunk.length; i += 1) {\n                cards = cards.concat(api_pull_chunk[i].data)\n            }\n            console.log(\"Loading \" + cards.length + \" cards into local.\")\n\n            store.dispatch(appendCards(cards)).then((result) => {\n                resolve(result);\n            })\n        });\n    });\n\n    // debugger;\n\n    // AuthService.logout();\n\n    // dispatch({\n    //     type: LOGOUT,\n    // });\n};\n\nexport const enrichCollectionCardsWithTcgData = (collectionCards) => {\n    const {tcgApi} = store.getState();\n    const currentCardKeys = Object.keys(tcgApi.cards.dict)\n    currentCardKeys.sort();\n\n    collectionCards.forEach(function(part, index, theArray) {\n        if(currentCardKeys.includes(theArray[index].cardId)) {\n            theArray[index]['rarity'] = tcgApi.cards.dict[theArray[index].cardId].rarity\n            theArray[index]['name'] = tcgApi.cards.dict[theArray[index].cardId].name\n            theArray[index]['setName'] = tcgApi.cards.dict[theArray[index].cardId].set.name\n            theArray[index]['setReleaseDate'] = tcgApi.cards.dict[theArray[index].cardId].set.releaseDate\n            theArray[index]['numberFull'] = tcgApi.cards.dict[theArray[index].cardId].number + \"/\" + tcgApi.cards.dict[theArray[index].cardId].set.printedTotal\n        }\n        else{\n            theArray[index]['rarity'] = \"Loading...\";\n            theArray[index]['name'] = \"Loading...\";\n            theArray[index]['setName'] = \"Loading...\";\n        }\n    });\n\n    return collectionCards;\n}","import {APPEND_TCG_CARDS, LOGOUT, SET_TCG_CARDS} from \"./types\";\nimport AuthService from \"../services/auth.service\";\n\n\nexport const setCards = (cards) => ({\n        type: SET_TCG_CARDS,\n        payload: cards,\n});\n\n// export const appendCards = (cards) => dispatch => {\n//         type: APPEND_TCG_CARDS,\n//         payload: cards,\n// });\n\nexport const appendCards = (cards) => dispatch => {\n        dispatch({\n                type: 'APPEND_TCG_CARDS',\n                payload: cards,\n        });\n        return Promise.resolve();\n};\n\n// export const clearMessage = () => ({\n//     type: CLEAR_MESSAGE,\n// });","import axios from 'axios';\nimport authHeader from './auth-header';\nimport store from \"../store\";\nimport {enrichCollectionCardsWithTcgData} from \"../helpers/tcgApiLocalData\";\nimport { API_URL } from '../config/api_config'\n\n// const API_BASE_URL = 'http://localhost:8080/api/';\n// const API_URL = 'http://localhost:8080/api/collection';\n\nclass CollectionService {\n    getAll() {\n        return axios.get(API_URL);\n    }\n\n    getEpic(query) {\n        let kek = API_URL;\n        return new Promise(function(resolve, reject) {\n            axios.get(API_URL + \"epic\", { params: query})\n                .then((epic_cards => {\n                    resolve(enrichCollectionCardsWithTcgData(epic_cards.data))\n                }))\n                .catch((error) => {\n                    reject(error);\n                })\n        });\n\n    }\n\n    getOneDetail(id) {\n        return axios.get(API_URL + \"collection/\" + id);\n\n\n        // return axios\n        //     .get(API_URL + \"signin\", { username, password })\n        //     .then((response) => {\n        //         if (response.data.accessToken) {\n        //             localStorage.setItem(\"user\", JSON.stringify(response.data));\n        //         }\n        //\n        //         return response.data;\n        //     });\n    }\n\n    postCollection(collection) {\n        let headers = authHeader();\n        headers.yeet = 'ass';\n\n        return axios\n            .post(API_URL + 'collection', collection, {headers: headers})\n            ;\n    }\n\n    putCollection(id, collection) {\n        return axios\n            .put(API_URL + \"collection/\" + id,  collection)\n            .then((response) => {\n                alert(\"Done!\")\n            })\n            .catch((err) => {\n                console.log(err);\n            })\n            ;\n    }\n\n    getTcgApiQuery(query){\n        return axios.get(API_URL + 'tcgApiQuery',\n            { params: {query:query }}\n            );\n    }\n\n    postTcgApiQuery(query){\n        return axios.post(API_URL + 'tcgApiQuery',\n            { data: {query:query }}\n            );\n    }\n\n    deleteCollection(id){\n        let headers = authHeader();\n        headers.yeet = 'ass';\n\n        // axios.delete(API_BASE_URL + 'collection' + \"/\" + id)\n\n        return axios.delete(API_URL + 'collection' + \"/\" + id, {headers: headers})\n\n    }\n\n    patchCollectionCards(cards){\n        let headers = authHeader();\n\n        // axios.delete(API_BASE_URL + 'collection' + \"/\" + id)\n\n        return axios.put(API_URL + 'collectionCards', {collectionCards: cards}, {headers: headers})\n    }\n\n\n}\n\nexport default new CollectionService();","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {Link, useNavigate} from \"react-router-dom\";\n\nimport CollectionService from \"../services/collection.service\";\nimport Button from 'react-bootstrap/Button';\nimport Table from \"react-bootstrap/Table\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport filterFactory, { textFilter, selectFilter, multiSelectFilter, numberFilter } from \"react-bootstrap-table2-filter\";\nimport 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.min.css';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport Col from \"react-bootstrap/Col\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\n\n\nclass BoardCollections extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            collections: []\n        };\n\n        // this.openFormatter = this.openFormatter.bind(this);\n        this.loadCollectionsIntoTable = this.loadCollectionsIntoTable.bind(this);\n        this.optionFormatter = this.optionFormatter.bind(this);\n        this.onDeleteClick = this.onDeleteClick.bind(this);\n        this.onRowClick = this.onRowClick.bind(this);\n    }\n\n    componentDidMount() {\n        this.loadCollectionsIntoTable();\n    }\n\n    loadCollectionsIntoTable(){\n        CollectionService.getAll().then(\n            response => {\n                this.setState({\n                    collections: response.data\n                });\n            },\n            error => {\n                this.setState({\n                    content:\n                        (error.response &&\n                            error.response.data &&\n                            error.response.data.message) ||\n                        error.message ||\n                        error.toString()\n                });\n            }\n        );\n    }\n\n    onRowClick(e, row, rowIndex){\n        console.log((e, row, rowIndex))\n    }\n\n    onDeleteClick(e){\n        if (window.confirm('Are you sure you want to delete? ' + e.currentTarget.id)) {\n            // Save it!\n            return CollectionService.deleteCollection(e.currentTarget.id)\n                .then(() => {\n                    this.loadCollectionsIntoTable();\n                })\n                .catch((e) => {\n                    alert(\"Error!\");\n                    console.log(e)\n                })\n\n\n\n\n        } else {\n            // Do nothing!\n            console.log('Thing was not saved to the database.');\n        }\n\n    }\n\n    onOpenClick(e){\n        const link = \"/collection/\" +  e.currentTarget.id;\n        window.open(link, \"_blank\")\n    }\n\n    optionFormatter(e){\n        const result = (\n            <span>\n                <span id={e} style={{cursor: 'pointer'}} onClick={(e) => {\n                    this.onOpenClick(e)\n                }}><i className=\"bi bi-box-arrow-up-right\"></i></span>\n\n                &nbsp;\n                &nbsp;\n                <span id={e} style={{cursor: 'pointer'}} onClick={(e) => {\n                    this.onDeleteClick(e)\n                }}><i className=\"bi bi-trash\"></i></span>\n            </span>\n\n        )\n        return result;\n    }\n\n    render() {\n        if(this.state.collections.length > 1){\n            console.log(this.state.collections[0]);\n        }\n\n        const rowEvents = {\n            onClick: (e, row, rowIndex) => {\n                const link = \"/collection/\" +  row.id;\n                window.open(link, \"_blank\")\n            }\n        };\n\n\n        const columns = [\n            {\n                dataField: 'name',\n                text: 'name',\n                sort: true,\n            },\n            {\n                dataField: 'collectedCardsUnique',\n                text: 'Collected',\n                sort: true,\n            },\n            {\n                dataField: 'totalCards',\n                text: 'totalCards',\n                sort: true,\n            },\n            {\n                dataField: 'status',\n                text: 'status',\n                sort: true,\n                sortFunc: (a, b, order, dataField, rowA, rowB) => {\n                    if (order === 'asc') {\n                        return b - a;\n                    }\n                    return a - b; // desc\n                },\n                formatter: (cell, row, rowIndex, formatExtraData ) => {\n                    return row.statusString;\n                }\n            }\n        ];\n\n\n\n\n\n\n\n        return (\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    {/*<h3>{this.state.content}</h3>*/}\n                    <h1>All Collections</h1>\n                    <Link to=\"/collection/create\" className=\"btn btn-primary\">Create Collection</Link>\n                    <div>\n                        {/*{collectionList}*/}\n\n                        <BootstrapTable\n                            data={this.state.collections}\n                            columns={columns}\n                            keyField={\"id\"}\n                            striped={true}\n                            hover={true}\n                            rowEvents={ rowEvents }\n                        >\n                        </BootstrapTable>\n\n\n                        {/*<BootstrapTable data={this.state.collections}*/}\n                        {/*                striped={true}*/}\n                        {/*                hover={true}*/}\n                        {/*                // rowEvents={rowEvents}*/}\n                        {/*>*/}\n                        {/*    <TableHeaderColumn dataField=\"name\" isKey={true} dataAlign=\"center\" dataSort={true}>Name</TableHeaderColumn>*/}\n                        {/*    <TableHeaderColumn dataField=\"collectedCardsUnique\" dataSort={true}>collectedCardsUnique</TableHeaderColumn>*/}\n                        {/*    <TableHeaderColumn dataField=\"totalCards\" dataSort={true}>totalCards</TableHeaderColumn>*/}\n                        {/*    <TableHeaderColumn dataField=\"status\" dataSort={true}>status</TableHeaderColumn>*/}\n                        {/*    <TableHeaderColumn dataField=\"filter\" dataSort={true}>filter</TableHeaderColumn>*/}\n                        {/*    /!*<TableHeaderColumn width={\"3em\"} dataField=\"id\" dataSort={true} dataFormat={this.openFormatter}></TableHeaderColumn>*!/*/}\n                        {/*    <TableHeaderColumn width={\"4em\"} dataField=\"id\" dataSorter=\"numericOnly\" dataSort={true} dataFormat={this.optionFormatter}></TableHeaderColumn>*/}\n                        {/*    /!*<TableHeaderColumn dataField=\"price\" dataFormat={priceFormatter}>Product Price</TableHeaderColumn>*!/*/}\n                        {/*</BootstrapTable>*/}\n\n                    </div>\n                </header>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    // const { message } = state.message;\n    return {\n        // message,\n    };\n}\n\n\nexport default connect(mapStateToProps)(BoardCollections);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport CollectionService from \"../services/collection.service\";\nimport Button from 'react-bootstrap/Button';\nimport { Form } from 'react-bootstrap';\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport { BootstrapTable, TableHeaderColumn } from 'react-bootstrap-table';\nimport { Spinner } from 'react-bootstrap';\n\nimport pokemon from 'pokemontcgsdk'\n\n\n\nfunction showDescription(cell, row) {\n    return cell.description;\n}\n\nfunction priceFormatter(cell, row){\n    return '<i className=\"glyphicon glyphicon-usd\"></i> ' + cell;\n}\n\n\nclass CollectionsCreate extends Component {\n    constructor(props) {\n        super(props);\n\n        this.searchTcgApiCard = this.searchTcgApiCard.bind(this);\n        this.changeSearchTerm = this.changeSearchTerm.bind(this);\n        this.changeCollectionName = this.changeCollectionName.bind(this);\n        this.saveCollection = this.saveCollection.bind(this);\n        this.Speeeeeeen = this.Speeeeeeen.bind(this);\n        this.saveAndRedirectClick = this.saveAndRedirectClick.bind(this);\n        this.saveAndCreateAnotherClick = this.saveAndCreateAnotherClick.bind(this);\n\n\n        this.state = {\n            searchCards: [],\n            searchTerm: 'name:blastoise',\n            collectionName: '',\n            isLoading: false,\n        };\n    }\n\n    componentDidMount() {\n\n    }\n\n    changeSearchTerm(e) {\n        this.setState({ searchTerm: e.target.value }, () =>  {\n            console.log(this.state)\n        })\n    }\n    changeCollectionName(e) {\n        this.setState({ collectionName: e.target.value }, () =>  {\n            console.log(this.state)\n        })\n    }\n\n    Speeeeeeen(){\n        if(this.state.isLoading){\n            return (\n                <div style={{display: 'flex', alignContent: 'center', justifyContent: 'center'}}>\n                    <div style={{display:\"inline-block\"}}>\n                        <Spinner animation=\"border\" role=\"status\" >\n                            {/*<span className=\"sr-only\">Loading.Weeeeeee</span>*/}\n                        </Spinner>\n                    </div>\n                </div >\n            );\n        }\n        else{\n            return \"\";\n        }\n    }\n\n\n    searchTcgApiCard(query){\n        this.setState({isLoading: true})\n        CollectionService.getTcgApiQuery(this.state.searchTerm)\n            .then((cards) => {\n                let cards_enriched = cards.data;\n\n\n\n                this.setState({searchCards: cards.data, isLoading: false}, () =>  {\n                    console.log(this.state)\n                })\n            })\n            .catch((ex) => {\n                alert(\"Error.\");\n                this.setState({ isLoading: false}, () =>  {\n                    console.log(this.state)\n                })\n            })\n    }\n\n    saveAndRedirectClick(){\n        this.saveCollection()\n            .then((response) => {\n                window.location = \"/collection/\" + response.data.id;\n            })\n            .catch((err) => {\n                alert(err);\n            })\n    }\n\n    saveAndCreateAnotherClick(){\n        this.saveCollection()\n            .then((response) => {\n                window.location = \"/collection/create\";\n            })\n            .catch((err) => {\n                alert(err);\n            })\n    }\n\n    saveCollection(){\n        if(this.state.collectionName === \"\"){\n            alert(\"CollectionName empty. Stopping save.\");\n            return;\n        }\n        if(this.state.searchCards.length === 0){\n            alert(\"No cards to save. Stopping save.\");\n            return;\n        }\n\n        const { searchCards } = { ...this.state };\n        const currentSearchCards = JSON.parse(JSON.stringify(searchCards));\n\n        let collectionToSubmit = {\n            name: this.state.collectionName,\n            filter: this.state.searchTerm,\n            cards: []\n        };\n\n        for (let obj of currentSearchCards) {\n            collectionToSubmit.cards.push({id: obj.id, count: 0 })\n        }\n\n\n\n        return CollectionService.postCollection(collectionToSubmit)\n\n\n    }\n\n\n\n    render() {\n        let collectionList = []\n\n        const isLoadingClass = this.state.isLoading ? 'none' : 'none';\n\n\n        return (\n            <div className=\"container\">\n\n                <header className=\"jumbotron\">\n                    <Container>\n\n                        <Row className=\"justify-content-md-center\">\n                            <Col xs lg=\"5\">\n                                <div style={{fontSize: '2.5em', textAlign: 'center'}}>Create Collection</div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </header>\n                <section style={{marginTop: '20px'}}>\n\n                    <Container>\n                        <Row className=\"justify-content-md-center\">\n                            <Col xs lg=\"5\">\n                                <Form.Label>Name</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"Collection Name\"\n                                    value={this.state.collectionName}\n                                    onChange={this.changeCollectionName}\n                                />\n                            </Col>\n                        </Row>\n                    </Container>\n\n\n\n\n                    <Container>\n                        <Row className=\"justify-content-md-center\">\n                            <Col xs lg=\"5\">\n                                <Form.Label>Filter</Form.Label>\n                                <Form.Control\n                                    type=\"text\"\n                                    placeholder=\"example: name:charizard\"\n                                    value={this.state.searchTerm}\n                                    onChange={this.changeSearchTerm}\n                                />\n                                <Button variant=\"primary\" type=\"submit\" onClick={this.searchTcgApiCard}>\n                                    Search\n                                </Button>\n                            </Col>\n                        </Row>\n                    </Container>\n                </section>\n\n                <section style={{marginTop: '20px'}}>\n                    <Container>\n                        <Row className=\"justify-content-md-center\">\n                            <Col xs={\"12\"} >\n                                {this.Speeeeeeen()}\n                                <Button className={\"float-right\"} variant=\"primary\" type=\"submit\" onClick={this.saveAndRedirectClick}>\n                                    Save\n                                </Button>\n                                &nbsp;\n                                <Button className={\"float-right\"} variant=\"primary\" type=\"submit\" onClick={this.saveAndCreateAnotherClick}>\n                                    Save And create another\n                                </Button>\n                            </Col>\n                            <Col xs lg=\"12\">\n                                {/*{collectionList}*/}\n                                <div>\n                                    {this.state.searchCards.length} Cards\n                                </div>\n                                <BootstrapTable data={this.state.searchCards} striped={true} hover={true}>\n                                    <TableHeaderColumn dataField=\"id\" isKey={true} dataAlign=\"center\" dataSort={true}>ID</TableHeaderColumn>\n                                    <TableHeaderColumn dataField=\"name\" dataSort={true}>Card No</TableHeaderColumn>\n                                    <TableHeaderColumn dataField=\"fullCardNumber\" dataSort={true}>fullCardNumber</TableHeaderColumn>\n                                    <TableHeaderColumn dataField=\"supertype\" dataSort={true}>Supertype</TableHeaderColumn>\n                                    <TableHeaderColumn dataField=\"setName\" dataSort={true}>setName</TableHeaderColumn>\n                                    <TableHeaderColumn dataField=\"setReleaseDate\" dataSort={true}>Release Date</TableHeaderColumn>\n                                    <TableHeaderColumn dataField=\"rarity\" dataSort={true}>Rarity</TableHeaderColumn>\n                                    {/*<TableHeaderColumn dataField=\"price\" dataFormat={priceFormatter}>Product Price</TableHeaderColumn>*/}\n                                </BootstrapTable>\n                            </Col>\n                        </Row>\n                    </Container>\n                </section>\n\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    // const { message } = state.message;\n    return {\n        // message,\n    };\n}\n\n\nexport default connect(mapStateToProps)(CollectionsCreate);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {Link, useNavigate} from \"react-router-dom\";\n\nimport CollectionService from \"../services/collection.service\";\nimport Button from 'react-bootstrap/Button';\nimport Table from \"react-bootstrap/Table\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\nimport {ArrowRight, CaretDownSquare} from 'react-bootstrap-icons';\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport {BootstrapTable, TableHeaderColumn} from \"react-bootstrap-table\";\nimport Col from \"react-bootstrap/Col\";\nimport ToolkitProvider from \"react-bootstrap-table2-toolkit\";\nimport paginationFactory from \"react-bootstrap-table2-paginator\";\nimport filterFactory from \"react-bootstrap-table2-filter\";\n\n\nclass CollectionView extends Component {\n    constructor(props) {\n        super(props);\n        this.handleCardCollectedCheckboxClick = this.handleCardCollectedCheckboxClick.bind(this);\n        this.handleSaveCollectionButtonClick = this.handleSaveCollectionButtonClick.bind(this);\n        this.cardCollectedToggle = this.cardCollectedToggle.bind(this);\n\n        this.state = {\n            collection: {collectionCards:[]},\n            collectionId: this.props.id,\n        };\n    }\n\n    componentDidMount() {\n        CollectionService.getOneDetail(this.props.id).then(\n            response => {\n                this.setState({\n                    collection: response.data\n                }, () => {\n                    console.log(this.state)\n                });\n            },\n            error => {\n                this.setState({\n                    content:\n                        (error.response &&\n                            error.response.data &&\n                            error.response.data.message) ||\n                        error.message ||\n                        error.toString()\n                });\n            }\n        );\n    }\n\n    cardCollectedToggle(cell, row, enumObject) {\n        // console.log(\">\", cell, row, enumObject);\n        // return 1;\n        // debugger;\n        console.log(row.cardId)\n        let ass =  (\n            <ToggleButton\n                className=\"my-0\"\n                id={row.cardId}\n                type=\"checkbox\"\n                variant=\"outline-primary\"\n                checked={row.count}\n                value={row.count}\n                onClick={this.handleCardCollectedCheckboxClick}\n                data={row.cardId}\n                size=\"sm\"\n            >\n                {/*{(card.count) ? <i className=\"bi bi-check-circle-fill\"></i> : <i className=\"bi bi-circle\"></i>}*/}\n                {(row.count) ? <i className=\"bi bi-check2-circle\"></i> : <i className=\"bi bi-circle\"></i>}\n            </ToggleButton>\n        )\n        // debugger;\n        return ass;\n    }\n\n    handleCardCollectedCheckboxClick(e) {\n        console.log(e.currentTarget.id);\n        // Why in the living fuck is this null, why does the toogle's ID not inherit correctly\n        // Do this bullshit instead\n        const id = e.currentTarget.htmlFor;\n\n        const { collection } = { ...this.state };\n        const currentState = collection;\n\n        for (let card of collection.collectionCards) {\n            if(card.cardId === id){\n                card.count = (card.count) ? 0 : 1;\n                break;\n            }\n        }\n\n\n        this.setState({ collection: currentState });\n    }\n\n\n    handleSaveCollectionButtonClick(e) {\n        const { collection } = { ...this.state };\n        const currentCollection = JSON.parse(JSON.stringify(collection));\n\n        let collectionToSubmit = {\"name\": this.state.collection.name};\n\n        const l = new Set(['orderNumber', 'count', 'cardId']);\n\n        for (let obj of currentCollection.collectionCards) {\n            for (let prop of Object.keys(obj)) {\n                if (!l.has(prop)) {\n                    delete obj[prop];\n                }\n            }\n        }\n        collectionToSubmit.cards = currentCollection.collectionCards;\n        CollectionService.putCollection( this.state.collectionId, collectionToSubmit)\n    }\n\n\n    render() {\n        console.log(this.state.collection);\n\n        let collectedCount = this.state.collection.collectionCards.reduce((previousValue, currentValue) => previousValue + Math.min(currentValue, 1), 0);\n\n        collectedCount = this.state.collection.collectionCards.reduce((a, b) => {\n            // console.log(a);\n            // debugger;\n            return a + b.count;\n            }\n            , 0);\n\n\n\n        let completion = 0;\n        if(this.state.collection.collectionCards.length > 0){\n            completion = collectedCount / this.state.collection.collectionCards.length\n        }\n        completion = completion * 100;\n        completion = Math.round(completion, 2) + '%';\n\n        if(this.state.collection.collectionCards.length > 0){\n            // debugger;\n        }\n\n\n        return (\n            <div className=\"container\">\n                <header className=\"jumbotron\">\n                    <h1>Collection {this.state.collection?.name} - {completion}</h1>\n                </header>\n                <Button onClick={this.handleSaveCollectionButtonClick} >Save Collection</Button>\n                <div>\n                    {/*<ToolkitProvider*/}\n                    {/*    // data={this.state.collectionCards}*/}\n                    {/*    data={this.state.collection?.collectionCards}*/}\n                    {/*    columns={columns}*/}\n                    {/*    keyField={\"collection_card_key\"}*/}\n                    {/*    striped={true}*/}\n                    {/*    hover={true}*/}\n                    {/*    srText={\"sss\"}*/}\n\n\n\n                    {/*    search*/}\n                    {/*>*/}\n                    {/*    {*/}\n                    {/*        props => (*/}\n                    {/*            <div>*/}\n                    {/*                <BootstrapTable*/}\n                    {/*                    { ...props.baseProps }*/}\n                    {/*                    pagination={ paginationFactory({paginationSize: 20}) }*/}\n                    {/*                    srText={\"sss\"}*/}\n                    {/*                    formatExtraData={ this.state.collectionCards }*/}\n                    {/*                    filter={ filterFactory() }*/}\n                    {/*                >*/}\n                    {/*                </BootstrapTable>*/}\n                    {/*            </div>*/}\n                    {/*        )*/}\n                    {/*    }*/}\n                    {/*</ToolkitProvider>*/}\n\n                    {/*<BootstrapTable data={this.state.collection?.collectionCards} striped={true} hover={true}>*/}\n                    {/*    <TableHeaderColumn dataField=\"orderNumber\" dataAlign=\"center\" dataSort={true}>orderNumber</TableHeaderColumn>*/}\n                    {/*    <TableHeaderColumn dataField=\"binderPageNo\" dataAlign=\"center\" dataSort={true}>binderPageNo</TableHeaderColumn>*/}\n                    {/*    <TableHeaderColumn dataField=\"binderSlotNo\" dataAlign=\"center\" dataSort={true}>binderSlotNo</TableHeaderColumn>*/}\n                    {/*    <TableHeaderColumn dataField=\"cardId\" isKey={true} dataAlign=\"center\" dataSort={true}>cardId</TableHeaderColumn>*/}\n                    {/*    <TableHeaderColumn dataField=\"name\" dataSort={true}>name</TableHeaderColumn>*/}\n                    {/*    <TableHeaderColumn dataField=\"rarity\" dataSort={true}>rarity</TableHeaderColumn>*/}\n                    {/*    <TableHeaderColumn dataField=\"setName\" dataSort={true}>setName</TableHeaderColumn>*/}\n                    {/*    <TableHeaderColumn dataField=\"Collected\" dataSort={true} dataFormat={this.cardCollectedToggle}>Collected</TableHeaderColumn>*/}\n                    {/*    <TableHeaderColumn dataField=\"setReleaseDate\" dataSort={true}>Release Date</TableHeaderColumn>*/}\n                    {/*    /!*<TableHeaderColumn dataField=\"price\" dataFormat={cardCollectedToggle}>Product Price</TableHeaderColumn>*!/*/}\n                    {/*</BootstrapTable>*/}\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    // const { message } = state.message;\n    return {\n        // message,\n    };\n}\n\n\nexport default connect(mapStateToProps)(CollectionView);\n","import { createBrowserHistory } from \"history\";\n\nexport const history = createBrowserHistory();","import React, { Component } from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nconst parseJwt = (token) => {\n    try {\n        return JSON.parse(atob(token.split('.')[1]));\n    } catch (e) {\n        return null;\n    }\n};\n\nclass AuthVerify extends Component {\n    constructor(props) {\n        super(props);\n\n        props.history.listen(() => {\n            const user = JSON.parse(localStorage.getItem(\"user\"));\n\n            if (user) {\n                const decodedJwt = parseJwt(user.accessToken);\n\n                if (decodedJwt.exp * 1000 < Date.now()) {\n                    props.logOut();\n                }\n            }\n        });\n    }\n\n    render() {\n        return <div></div>;\n    }\n}\n\nexport default AuthVerify;","function NotFound(props) {\n    return <h1>404</h1>;\n}\n\nexport default NotFound;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {Link, useNavigate} from \"react-router-dom\";\n\nimport CollectionService from \"../services/collection.service\";\nimport filterFactory, { textFilter, selectFilter, multiSelectFilter, numberFilter } from \"react-bootstrap-table2-filter\";\nimport Button from 'react-bootstrap/Button';\nimport Table from \"react-bootstrap/Table\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\nimport {ArrowRight, CaretDownSquare} from 'react-bootstrap-icons';\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\n// import {BootstrapTable, TableHeaderColumn} from \"react-bootstrap-table-next\";\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport Col from \"react-bootstrap/Col\";\nimport paginationFactory from 'react-bootstrap-table2-paginator';\nimport 'react-bootstrap-table2-toolkit/dist/react-bootstrap-table2-toolkit.min.css';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport Row from \"react-bootstrap/Row\";\nimport tcgApi from \"../reducers/tcgApi\";\nimport { setCards } from \"../actions/tcgApi\"\nimport {enrichCollectionCardsWithTcgData, getCardsNotInLocal} from \"../helpers/tcgApiLocalData\";\nconst { SearchBar } = Search;\n\n\nclass CollectionViewEpic extends Component {\n    constructor(props) {\n        super(props);\n        this.handleCardCollectedCheckboxClick = this.handleCardCollectedCheckboxClick.bind(this);\n        this.handleSaveCollectionButtonClick = this.handleSaveCollectionButtonClick.bind(this);\n        this.handleCardPurchasedCheckboxClick = this.handleCardPurchasedCheckboxClick.bind(this);\n        this.loadFilters = this.loadFilters.bind(this);\n        // this.cardCollectedToggle = this.cardCollectedToggle.bind(this);\n\n        console.log(\"------------------\");\n        console.log(this.props);\n        console.log(\"------------------\");\n\n        // debugger;\n        this.state = {\n            displaySingleCollection: 'id' in this.props,\n            collectionId: this.props.id,\n            collectionName: '',\n\n            collectionCards:[],\n            changedCards: new Set(),\n            checkChanged: true,\n            propertyValues: {\n                setNames: {},\n                collectionNames: {},\n            },\n            filters: {},\n\n        };\n\n        this.setNameFilter = null;\n    }\n\n    componentDidMount() {\n        let epicFilter = {};\n        if (this.state.collectionId != undefined) {\n            epicFilter = {\"collectionId\": this.state.collectionId}\n        }\n\n        CollectionService.getEpic(epicFilter).then(\n            response => {\n\n                let cardIds = [...new Set(response.map(item => item.cardId))];\n                getCardsNotInLocal(cardIds).then((result) => {\n\n                    const new_collectionCards = enrichCollectionCardsWithTcgData(this.state.collectionCards)\n                    this.setState({\n                        collectionCards: new_collectionCards,\n                        propertyValues: this.loadFilters(new_collectionCards)\n                    }, () => {\n                        this.forceUpdate();\n                    });\n                })\n\n                this.setState({\n                    collectionCards: response,\n                    propertyValues: this.loadFilters(response)\n\n                }, () => {\n                    // console.log(this.state)\n                    this.forceUpdate();\n                });\n            },\n            error => {\n                console.log(error)\n                alert(\"Error\")\n            }\n        );\n    }\n\n    loadFilters(cards){\n        const setNames = [...new Set(cards.map(item => item.setName))].sort();\n        const setNamesDict = {};\n        setNames.forEach(item => {\n            setNamesDict[item] = item\n        });\n\n        const setNamesTableFilter = Object.assign({}, ...setNames.map((x) => ({[x]: x})));\n\n\n        const collectionNames = [...new Set(cards.map(item => item.collectionName))].sort();\n        const collectionNamesDict = {};\n        collectionNames.forEach(item => {\n            collectionNamesDict[item] = item\n        });\n\n\n        return {\n            setNames: setNamesDict,\n            collectionNames: collectionNamesDict,\n        }\n    }\n\n    handleCardCollectedCheckboxClick(e) {\n        const id = e.currentTarget.htmlFor;\n        let {changedCards} = this.state;\n        let stateRow = this.state.collectionCards.find(item => item.collection_card_key === id);\n        stateRow.count = (stateRow.count) ? 0 : 1;\n        changedCards.add(id)\n        // debugger;\n\n        this.setState({ collectionCards: this.state.collectionCards , checkChanged: !this.state.checkChanged, changedCards:changedCards}, () => {\n            console.log('InOnClick: ', this.state.collectionCards[0].count );\n            console.log('InOnClick: ', this.state.checkChanged );\n            console.log('InOnClick: ', this.state.changedCards );\n            this.forceUpdate();\n            this.handleSaveCollectionButtonClick('test');\n        });\n    }\n    handleCardPurchasedCheckboxClick(e) {\n        const id = e.currentTarget.htmlFor;\n\n        let stateRow = this.state.collectionCards.find(item => item.collection_card_key === id);\n        stateRow.purchased = !stateRow.purchased\n        this.state.changedCards.add(id)\n        // debugger;\n\n        this.setState({ collectionCards: this.state.collectionCards , checkChanged: !this.state.checkChanged}, () => {\n            this.forceUpdate();\n        });\n    }\n\n\n\n\n    handleSaveCollectionButtonClick(e) {\n        const { collectionCards } = { ...this.state };\n        // debugger;\n        const cardsToSend = [... this.state.changedCards].map((cardId) => {\n            let yeet = collectionCards.find(item => item.collection_card_key === cardId);\n            return yeet;\n        })\n\n        const ass = 1;\n\n        CollectionService.patchCollectionCards( cardsToSend )\n            .then((response) => {\n                this.setState({ changedCards:new Set() }, () => {\n                    this.forceUpdate();\n                });\n            })\n            .catch((err) => {\n                alert(err)\n            })\n    }\n\n\n    render() {\n        let selectOptions = {\n            'XY': 'XY'\n        };\n        selectOptions = this.state.propertyValues.setNames;\n\n        let { collectionCards, filters } = this.state;\n        const { tcgApi } = this.props;\n        const setNameFilter = filters.setNameFilter ? filters.setNameFilter.filterVal : null;\n\n        let collectionName = '';\n        if(this.state.propertyValues.collectionNames != {}){\n            collectionName = Object.keys(this.state.propertyValues.collectionNames)[0];\n        }\n\n        let completion = 0;\n        let collectedCount = this.state.collectionCards.reduce((a, b) => {  return a + b.count; } , 0);\n        if(collectionCards.length > 0){\n            completion = collectedCount / collectionCards.length\n        }\n        completion = completion * 100;\n        completion = Math.round(completion, 2) + '%';\n\n        // ENrich collectionCards with data  from LocalStorage / TCG API\n\n\n        const columns = [\n\n            {\n                dataField: 'collectionName',\n                text: 'collection name',\n                searchable: true,\n                // headerStyle: (colum, colIndex) => {\n                //     return { width: '6em' };\n                // },\n                //\n                filter: selectFilter({\n                    // filter: multiSelectFilter({\n                    options: this.state.propertyValues.collectionNames,\n                    // getFilter: filter => {\n                    //     this.setNameFilter = filter;\n                    // }\n                }),\n                sort: true,\n            },\n            {\n                dataField: 'numberFull',\n                text: 'number',\n                searchable: true,\n                headerStyle: (colum, colIndex) => {\n                    return { width: '6em' };\n                },\n                sort: true,\n            },\n            {\n                dataField: 'cardId',\n                text: 'cardId',\n                searchable: true,\n                hidden: true,\n                sort: true,\n            },\n            {\n                dataField: 'name',\n                text: 'name',\n                searchable: true,\n                sort: true,\n                // headerStyle: (colum, colIndex) => {\n                //     return { width: '15em' };\n                // },\n            },\n            {\n                dataField: 'rarity',\n                text: 'rarity',\n                searchable: true,\n                sort: true,\n                headerStyle: (colum, colIndex) => {\n                    return { width: '10em' };\n                },\n            },\n            {\n                dataField: 'setName',\n                text: 'setName',\n                searchable: true,\n                style: (row, rowIndex) => {\n                    return {\n                        whiteSpace: \"nowrap\",\n                        textOverflow: \"ellipsis\",\n                        overflow: \"hidden\",\n                    }\n                },\n                sort: true,\n                filter: selectFilter({\n                // filter: multiSelectFilter({\n                    options: this.state.propertyValues.setNames,\n                    // getFilter: filter => {\n                    //     this.setNameFilter = filter;\n                    // }\n                })\n            },\n            {\n                dataField: 'setReleaseDate',\n                text: 'release date',\n                searchable: true,\n                sort: true,\n                headerStyle: (colum, colIndex) => {\n                    return { width: '7em' };\n                },\n\n            },\n            {\n                dataField: 'collection_card_key',\n                text: 'collection_card_key',\n                hidden: true,\n                sort: true,\n\n            },\n            {\n                dataField: 'orderNumber',\n                text: 'col',\n                headerStyle: (colum, colIndex) => {\n                    return { width: '3em'};\n                },\n                sort: true,\n\n            },\n            {\n                dataField: 'binderPageNo',\n                text: 'pg',\n                headerStyle: (colum, colIndex) => {\n                    return { width: '3em' };\n                },\n                sort: true,\n            },\n            {\n                dataField: 'binderSlotNo',\n                text: 'slot',\n                headerStyle: (colum, colIndex) => {\n                    return { width: '3em' };\n                },\n                sort: true,\n            },\n            {\n                dataField: 'count',\n                text: 'Collected',\n                filter: selectFilter({\n                    options: [\n                        { value: 0, label: 'N' },\n                        { value: 1, label: 'Y' },\n                    ]\n                }),\n                headerStyle: (colum, colIndex) => {\n                    return { width: '7em' };\n                },\n                formatExtraData: {collectionCards: this.state.collectionCards, changed: this.state.checkChanged},\n                formatter: (cell, row, rowIndex, formatExtraData ) => {\n                    const myFuckingData = formatExtraData.collectionCards;\n                    const stateRow = myFuckingData.find(item => item.collection_card_key === row.collection_card_key);\n                    return (\n                        <ToggleButton\n                            className=\"my-0\"\n                            id={row.collection_card_key}\n                            type=\"checkbox\"\n                            variant=\"outline-primary\"\n                            checked={(stateRow.count) == 1 ? true : false}\n                            value={stateRow.count}\n                            onClick={this.handleCardCollectedCheckboxClick}\n                            data={row.cardId}\n                            size=\"sm\"\n                        >\n                            {(stateRow.count) ? <i className=\"bi bi-check-circle-fill\"></i> : <i className=\"bi bi-circle\"></i>}\n                            {/*{(stateRow.count) ? <i className=\"bi bi-check2-circle\"></i> : <i className=\"bi bi-circle\"></i>} {stateRow.count}  / {rowIndex}*/}\n                        </ToggleButton>\n\n                    )\n                },\n            },\n            {\n                dataField: 'purchased',\n                text: 'purchased',\n                filter: selectFilter({\n                    options: [\n                        { value: false, label: 'N' },\n                        { value: true, label: 'Y' },\n                    ]\n                }),\n                headerStyle: (colum, colIndex) => {\n                    return { width: '7em' };\n                },\n                formatExtraData: {collectionCards: this.state.collectionCards, changed: this.state.checkChanged},\n                formatter: (cell, row, rowIndex, formatExtraData ) => {\n                    const myFuckingData = formatExtraData.collectionCards;\n                    const stateRow = myFuckingData.find(item => item.collection_card_key === row.collection_card_key);\n                    return (\n                        <ToggleButton\n                            className=\"my-0\"\n                            id={row.collection_card_key}\n                            type=\"checkbox\"\n                            variant=\"outline-primary\"\n                            checked={stateRow.purchased}\n                            value={stateRow.purchased}\n                            onClick={this.handleCardPurchasedCheckboxClick}\n                            data={row.cardId}\n                            size=\"sm\"\n                        >\n                            {(stateRow.purchased) ? <i className=\"bi bi-check-circle-fill\"></i> : <i className=\"bi bi-circle\"></i>}\n                            {/*{(stateRow.purchased) ? <i className=\"bi bi-check2-circle\"></i> : <i className=\"bi bi-circle\"></i>} {stateRow.purchased}  / {rowIndex}*/}\n                        </ToggleButton>\n\n                    )\n                },\n            },\n\n\n\n        ];\n\n\n\n\n\n\n        return (\n            <div className=\"container-fluid\">\n\n\n                <header className=\"jumbotron\">\n                    {this.state.displaySingleCollection ? (\n                        <h1>Collection {collectionName} - {completion}</h1>\n                    ) : (null )}\n\n\n                </header>\n\n\n\n\n                <Row>\n                    <Col classnames={\"col-md-auto\"}>\n                        <h3>Search for cards:</h3>\n                    </Col>\n                    <Col xs={1}>\n                        <Button variant=\"primary\" onClick={this.handleSaveCollectionButtonClick}>Save</Button>\n                    </Col>\n\n                </Row>\n\n\n\n                <ToolkitProvider\n                    // data={this.state.collectionCards}\n                    data={collectionCards}\n                    columns={columns}\n                    keyField={\"collection_card_key\"}\n                    striped={true}\n                    hover={true}\n                    exportCSV={ {\n                        fileName: 'custom.csv',\n                        separator: '|',\n                        ignoreHeader: true,\n                        noAutoBOM: false\n                    } }\n                    condensed={true}\n\n\n\n                    search\n                >\n                    {\n                        props => (\n                            <div>\n                                <SearchBar { ...props.searchProps } />\n                                <hr />\n                                <BootstrapTable\n                                    { ...props.baseProps }\n\n                                    srText={\"sss\"}\n                                    formatExtraData={ this.state.collectionCards }\n                                    filter={ filterFactory() }\n                                    pagination={ paginationFactory({sizePerPageList: [\n                                        {\n                                            text: '10', value: 10\n                                        }\n                                        , {\n                                            text: '30', value: 30\n                                        }\n                                        ,\n                                            {\n                                            text: 'All', value: this.state.collectionCards.length\n                                        } ]\n                                        // , paginationSize: 'All'\n                                    })\n\n                                    }\n                                >\n                                </BootstrapTable>\n                            </div>\n                        )\n                    }\n                </ToolkitProvider>\n\n\n                {/*</div>*/}\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    const { tcgApi } = state;\n    // debugger;\n    return {\n        tcgApi,\n    };\n}\n\n\nexport default connect(mapStateToProps)(CollectionViewEpic);","import {useParams} from \"react-router\";\nimport CollectionView from \"./collections-view.component\";\nimport React from \"react\";\nimport CollectionViewEpic from \"./collection-view-epic-component\";\n\nfunction CollectionViewWrapper(props) {\n    const { collectionid } = useParams();\n    return (\n        // <CollectionView id={id}/>\n        <CollectionViewEpic collectionid={collectionid}/>\n    );\n}\n\nexport default CollectionViewWrapper;","import {useParams} from \"react-router\";\nimport CollectionView from \"./collections-view.component\";\nimport React from \"react\";\nimport CollectionViewEpic from \"./collection-view-epic-component\";\n\nfunction CollectionViewWrapper(props) {\n    const { id } = useParams();\n    return (\n        // <CollectionView id={id}/>\n        <CollectionViewEpic id={id}/>\n    );\n}\n\nexport default CollectionViewWrapper;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport Login from \"./components/login.component\";\nimport Register from \"./components/register.component\";\nimport Home from \"./components/home.component\";\nimport Profile from \"./components/profile.component\";\nimport BoardUser from \"./components/board-user.component\";\nimport BoardModerator from \"./components/board-moderator.component\";\nimport BoardAdmin from \"./components/board-admin.component\";\nimport BoardCollections from \"./components/collections-list.component\";\nimport CreateCollection from \"./components/collections-create.component\"\nimport ViewCollection from \"./components/collections-view.component.js\"\n\nimport { logout } from \"./actions/auth\";\n\nimport { clearMessage } from \"./actions/message\";\n\nimport { history } from './helpers/history';\nimport AuthVerify from \"./common/auth-verify\";\nimport NotFound from \"./components/NotFound\";\nimport CollectionViewEpic from \"./components/collection-view-epic-component\";\nimport CollectionViewEpicWrapper from \"./components/collections-view-epic.function\";\nimport CollectionViewWrapper from \"./components/collection-view.function\";\nimport {loadCardsFromLocal} from \"./helpers/tcgApiLocalData\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.logOut = this.logOut.bind(this);\n\n    this.state = {\n      showModeratorBoard: false,\n      showAdminBoard: false,\n      currentUser: undefined,\n    };\n\n    history.listen((location) => {\n      props.dispatch(clearMessage()); // clear message when changing location\n    });\n  }\n\n  componentDidMount() {\n    const user = this.props.user;\n\n    if (user) {\n      console.log(user.roles)\n\n      this.setState({\n        currentUser: user,\n        showModeratorBoard: user.roles.includes(\"ROLE_MODERATOR\"),\n        showAdminBoard: user.roles.includes(\"ROLE_ADMIN\"),\n      });\n    }\n  }\n\n  logOut() {\n    this.props.dispatch(logout());\n    this.setState({\n      showModeratorBoard: false,\n      showAdminBoard: false,\n      currentUser: undefined,\n    });\n  }\n\n  render() {\n    const { currentUser, showModeratorBoard, showAdminBoard } = this.state;\n    const user = this.props.user;\n\n    console.log(user?.roles);\n    console.log(\"haha\");\n\n    return (\n        <Router history={history}>\n          <div>\n            <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n              <Link to={\"/\"} className=\"navbar-brand\">\n                bezKoder\n              </Link>\n\n              <div className=\"navbar-nav mr-auto\">\n                <li className=\"nav-item\">\n                  <Link to={\"/home\"} className=\"nav-link\">\n                    Home\n                  </Link>\n                </li>\n\n                {user?.roles.includes(\"ROLE_MODERATOR\") && (\n                    <li className=\"nav-item\">\n                      <Link to={\"/mod\"} className=\"nav-link\">\n                        Moderator Board\n                      </Link>\n                    </li>\n                )}\n\n                {user?.roles.includes(\"ROLE_ADMIN\")   && (\n                    <li className=\"nav-item\">\n                      <Link to={\"/admin\"} className=\"nav-link\">\n                        Admin Board\n                      </Link>\n                    </li>\n                )}\n\n                <li className=\"nav-item\">\n                  <Link to={\"/collections\"} className=\"nav-link\">\n                    Collections\n                  </Link>\n                </li>\n\n\n                {currentUser && (\n                    <React.Fragment>\n                      <li className=\"nav-item\">\n                        <Link to={\"/epic\"} className=\"nav-link\">\n                          Epic\n                        </Link>\n                      </li>\n                    </React.Fragment>\n                )}\n              </div>\n\n              {currentUser ? (\n                  <div className=\"navbar-nav ml-auto\" style={{marginLeft: 'auto'}}>\n                    <li className=\"nav-item\">\n                      <Link to={\"/profile\"} className=\"nav-link\">\n                        {currentUser.username}\n                      </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                      <Link to={\"/user\"} className=\"nav-link\">\n                        User\n                      </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                      <a href=\"/login\" className=\"nav-link\" onClick={this.logOut}>\n                        LogOut\n                      </a>\n                    </li>\n                  </div>\n              ) : (\n                  <div className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                      <Link to={\"/login\"} className=\"nav-link\">\n                        Login\n                      </Link>\n                    </li>\n\n                    <li className=\"nav-item\">\n                      <Link to={\"/register\"} className=\"nav-link\">\n                        Sign Up\n                      </Link>\n                    </li>\n                  </div>\n              )}\n            </nav>\n\n            <div className=\"mt-3\">\n              <Routes>\n                <Route exact path={\"/\"} element={<Home/>} />\n                <Route exact path={\"/home\"} element={<Home/>} />\n\n                <Route exact path=\"/login\" element={<Login/>} />\n                <Route exact path=\"/register\" element={<Register/>} />\n                <Route exact path=\"/profile\" element={<Profile/>} />\n                <Route path=\"/user\" element={<BoardUser/>} />\n                <Route path=\"/mod\" element={<BoardModerator/>} />\n                <Route path=\"/admin\" element={<BoardAdmin/>} />\n\n                <Route path=\"/collections\" element={<BoardCollections/>} />\n                <Route path=\"/collection/create\" element={<CreateCollection/>} />\n\n                <Route path=\"/collection/:id\" element={<CollectionViewWrapper/>} />\n\n                <Route path=\"/epic\" element={<CollectionViewEpicWrapper/>} />\n                {/*<Route path=\"/epic/:collectionId\" element={<CollectionViewEpicWrapper/>} />*/}\n                <Route path=\"*\" element={<NotFound/>} />\n\n\n\n\n              </Routes>\n            </div>\n            <AuthVerify logOut={this.logOut}  history={history}/>\n          </div>\n        </Router>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  const { user } = state.auth;\n  return {\n    user,\n  };\n}\n\nexport default connect(mapStateToProps)(App);","import { SET_MESSAGE, CLEAR_MESSAGE } from \"./types\";\n\nexport const setMessage = (message) => ({\n    type: SET_MESSAGE,\n    payload: message,\n});\n\nexport const clearMessage = () => ({\n    type: CLEAR_MESSAGE,\n});","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport store from \"./store\"\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}